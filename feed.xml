<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://mincong.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mincong.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2021-07-25T13:46:46+02:00</updated><id>https://mincong.io/feed.xml</id><title type="html">Mincong Huang</title><subtitle>Hi, welcome to my blog! I'm a software engineer at Datadog. I write blog posts in my free time. My blogs are bits and pieces of my tech journey. Most of them are related to Java. Hope you enjoy them! My opinions are my own, not Datadog's. This blog is powered by Jekyll, a simple, blog-aware, static sites solution.
</subtitle><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><entry xml:lang="en"><title type="html">Fix Corrupted Index in Elasticsearch</title><link href="https://mincong.io/en/elasticsearch-corrupted-index/" rel="alternate" type="text/html" title="Fix Corrupted Index in Elasticsearch" /><published>2021-07-14T16:57:49+02:00</published><updated>2021-07-14T16:57:49+02:00</updated><id>https://mincong.io/en/elasticsearch-corrupted-index</id><content type="html" xml:base="https://mincong.io/en/elasticsearch-corrupted-index/">&lt;p class=&quot;info&quot;&gt;This article is translated with Google Translate and reviewed by Mincong.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;A red index appeared on the production line because of the use of &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/indices-forcemerge.html&quot; title=&quot;Force Merge API&quot;&gt;Force Merge API&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;store_exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;corrupt_index_exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;reason&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;failed engine (reason: [corrupt file (source: [force merge])]) (resource=preexisting_corruption)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;caused_by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i_o_exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;reason&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;failed engine (reason: [corrupt file (source: [force merge])])&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;caused_by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;corrupt_index_exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;reason&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;checksum failed (hardware problem?): expected=70193aa8 actual=c48ab092 (resource=BufferedChecksumIndexInput(NIOFSIndexInput(path=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/share/elasticsearch/data/nodes/0/indices/w76sdoDFRm-xxxxxxxxxxx/0 /index/_ke.fdt&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)))&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because of this index, the health of the Elasticsearch cluster is in red, and an urgent fix is needed.&lt;/p&gt;

&lt;h2 id=&quot;situation-analysis&quot;&gt;Situation Analysis&lt;/h2&gt;

&lt;p&gt;Preliminary investigation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The cluster does not use Elasticsearch Snapshot for backup&lt;/li&gt;
  &lt;li&gt;The index is not being written with new data, and the data is old data two weeks ago, which is basically read-only.&lt;/li&gt;
  &lt;li&gt;Tried restarting the corresponding data node, but it didn’t get better&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A similar situation was found on the Elastic forum, and someone encountered a damaged index that needed to be repaired &lt;a href=&quot;https://discuss.elastic.co/t/corrupted-elastic-index/135932&quot; title=&quot;Corrupted Elastic Index&quot;&gt;Corrupted elastic index&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210714-question.png&quot; alt=&quot;Forum Questions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the forum question, Mr. Thiago Souza and Mr. Yannick Welsch each provided a solution. Let’s take a look together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Potential solution provided by Thiago Souza:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an indication of either hardware errors (check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmesg&lt;/code&gt;) or that it maybe ran out of disk space.
At this point segments are corrupted and data is lost, meaning that you can’t recover the whole index anymore. Unless you have a snapshot (which is recommended for production).
There are a couple of options to try to partially recover this index:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Try to partially recover the corrupted shard:
    &lt;ol&gt;
      &lt;li&gt;Close the index.&lt;/li&gt;
      &lt;li&gt;Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.shard.check_on_startup: fix&lt;/code&gt; for this index.&lt;/li&gt;
      &lt;li&gt;Open the index. At this time index will start to be verified and may take a long time.&lt;/li&gt;
      &lt;li&gt;If it recovers, then you need to redo step 1 to 3 but set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.shard.check_on_startup: false&lt;/code&gt; otherwise it will always try to fix when it opens again.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;If shard can’t be partially recovered then the only way is to completely drop it so at least the index can be recovered with the other healthy shards. For doing that you could try the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allocate_empty_primary&lt;/code&gt; command of Cluster Reroute API 109.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;None of these are guaranteed to work as it is highly dependent of the type of damage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Potential solution provided by Yannick Welsch:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note that the corruption marker file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corrupted_*&lt;/code&gt; will prevent the shard from being allocated as primary. This file is managed by Elasticsearch, and is unaware of the fact that you’ve fixed the index using Lucene’s CheckIndex. Removing this failure marker file should allow this shard to be allocated again.&lt;/p&gt;

&lt;h2 id=&quot;resolution-steps&quot;&gt;Resolution Steps&lt;/h2&gt;

&lt;p&gt;Next, we will try the solutions suggested by these two engieers.&lt;/p&gt;

&lt;h3 id=&quot;step-1-try-to-fix-the-index&quot;&gt;Step 1: Try to Fix The index&lt;/h3&gt;

&lt;p&gt;Try Thiago Souza’s suggestion to partially repair the corrupted shards:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Try to partially recover the corrupted shard:
      &lt;ol&gt;
        &lt;li&gt;Close the index.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.1 Use &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/indices-close.html&quot; title=&quot;Close Index API (7.x)&quot;&gt;Close Index API (7.x)&lt;/a&gt; Close the index:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST localhost:9200/MY_INDEX/_close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that after closing the index, the index will not be able to write new data.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;\2. Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.shard.check_on_startup: fix&lt;/code&gt; for this index.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.2 Add the configuration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.shard.check_on_startup: fix&lt;/code&gt; to configure the index level configuration so that the corresponding check can be performed when the index is started. However, after Elasticsearch 7.0, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fix&lt;/code&gt; option has been permanently removed and can no longer be used. Let’s take a look at the official document &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.8/index-modules.html&quot; title=&quot;Index Modules (6.8)&quot;&gt;Index Modules (6.8)&lt;/a&gt; to better understand the configuration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.shard.check_on_startup&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It accepts the following options:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Option&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;false&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(default) Don’t check for corruption when opening a shard.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;checksum&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Check for physical corruption.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Check for both physical and logical corruption. This is much more expensive in terms of CPU and memory usage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;fix&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The same as false. This option is deprecated and will be completely removed in 7.0. Same as false. (Note: it was deprecated in &lt;a href=&quot;https://github.com/elastic/elasticsearch/pull/32279/files&quot; title=&quot;PR-32279&quot;&gt;PR-32279&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So for an Elasticsearch 7.x cluster, you should try:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT localhost:9200/MY_INDEX/_settings &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
{
  &quot;index.shard.check_on_startup&quot;: false
}
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But I think this option is invalid, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; means that no corruption will be checked and fixed. Moreover, as mentioned in the &lt;a href=&quot;#problem&quot;&gt;Problem&lt;/a&gt; section at the beginning of the article, restarting the data node did not improve the situation and the problem persists. I also tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; and didn’t fix anything.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;\4. If it recovers, then you need to redo step 1 to 3 but set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.shard.check_on_startup: false&lt;/code&gt; otherwise it will always try to fix when it opens again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.4 Skip this step, because the previous step was unsuccessful and there is no need to continue. Before proceeding to the next step, clear the configuration set above and restore the default configuration.&lt;/p&gt;

&lt;h3 id=&quot;step-2-accept-data-loss&quot;&gt;Step 2: Accept data loss?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;If shard can’t be partially recovered then the only way is to completely drop it so at least the index can be recovered with the other healthy shards. For doing that you could try the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allocate_empty_primary&lt;/code&gt; command of &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/cluster-reroute.html&quot; title=&quot;Cluster Reroute API (7.x)&quot;&gt;Cluster Reroute API (7.x)&lt;/a&gt;.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a data engineer, how can we accept data loss casually? Can’t accept it! Let’s take a look at Mr. Yannick Welsch’s advice first.&lt;/p&gt;

&lt;h3 id=&quot;step-3-fix-through-lucene-level&quot;&gt;Step 3: Fix through Lucene level&lt;/h3&gt;

&lt;p&gt;Try to fix the data according to the original steps provided by Mr. Matthias Wilhelm, that is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to the data node remotely&lt;/li&gt;
  &lt;li&gt;Run Lucene repair tool CheckIndex&lt;/li&gt;
  &lt;li&gt;Remove the corrupted flag file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corrupted_*&lt;/code&gt; so that Elasticsearch can start normally&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The specific operations are as follows.&lt;/p&gt;

&lt;p&gt;First, you can use Elasticsearch’s &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-explain.html&quot; title=&quot;Explain API (7. .x)&quot;&gt;Explain API (7.x)&lt;/a&gt; Find the corresponding shard that cannot be allocated and the machine where it is located. Then log in to the machine remotely.&lt;/p&gt;

&lt;p&gt;The second point is to repair shards (also known as Lucene Index). This is detailed in Lucene’s Javadoc, such as &lt;a href=&quot;https://lucene.apache.org/core/6_4_0/core/org/apache/lucene/index/CheckIndex.html#main -java.lang.String:A-&quot; title=&quot;CheckIndex (Lucene 6.4.0 API)&quot;&gt;CheckIndex (Lucene 6.4.0 API)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Command-line interface to check and exorcise corrupt segments from an index.&lt;/p&gt;

  &lt;p&gt;Run it like this:&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-verbose] [-segment X] [-segment Y]


-exorcise: actually write a new segments_N file, removing any problematic segments. *LOSES DATA*
-segment X: only check the specified segment(s). This can be specified multiple times, to check more than one segment, eg -segment _2 -segment _a. You can't use this with the -exorcise option.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;WARNING: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-exorcise&lt;/code&gt; should only be used on an emergency basis as it will cause documents (perhaps many) to be permanently removed from the index. Always make a backup copy of your index before running this! Do not run this tool on an index that is actively being written to. You have been warned!&lt;/p&gt;

  &lt;p&gt;Run without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-exorcise&lt;/code&gt;, this tool will open the index, report version information and report any exceptions it hits and what action it would take if -exorcise were specified. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-exorcise&lt;/code&gt;, this tool will remove any segments that have issues and write a new segments_N file. This means all documents contained in the affected segments will be removed.&lt;/p&gt;

  &lt;p&gt;This tool exits with exit code 1 if the index cannot be opened or has any corruption, else 0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After confirming that you want to use the repair tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckIndex&lt;/code&gt;, you need to confirm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The specific location of Elasticsearch shards. If a machine has only one Elasticsearch server running, it should be in a folder under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${ES_HOME}/data/nodes/0/indices/...&lt;/code&gt;. The specific path can be seen in the Explain API reponse (see the JSON excerpt at the beginning of the article).&lt;/li&gt;
  &lt;li&gt;The specific location of the Elasticsearch library. It should be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${ES_HOME}/lib&lt;/code&gt;. We need this location because it is where Lucene Core’s JAR files are stored.&lt;/li&gt;
  &lt;li&gt;Decide whether to back up the shards first, and then perform the fix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After everything is ready, execute the following command. Note that the three dots after Lucene are three characters dot, not one character, because some operating systems/blogs will switch them to another similar character.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/share/elasticsearch/lib
java &lt;span class=&quot;nt&quot;&gt;-cp&lt;/span&gt; lucene-core&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jar &lt;span class=&quot;nt&quot;&gt;-ea&lt;/span&gt;:org.apache.lucene... org.apache.lucene.index.CheckIndex /usr/share/elasticsearch/data/nodes/0/indices/w76sdoDFRm-xxxxxxxxxxx/0/ index &lt;span class=&quot;nt&quot;&gt;-verbose&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exorcise&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After executing the command, CheckIndex returns:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No problems were detected with this index.

Took 118.609 sec total.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uh. . . So there are no problems? No data corruption at all? Could it be an unexpected situation, and Elasticsearch did not handle the exception correctly?&lt;/p&gt;

&lt;p&gt;Ok. Since the data is not corrupted, the next step is to move the corrupted flag file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corrupted_*&lt;/code&gt; to another folder (equivalent to removal). After a while, this shard was restored: it was successfully allocated, and it does not appear in the Explain API. There is no need to restart the server during this process. Next, connect to other machines and perform the same operation on all related red shards (shards that were not successfully allocated). Finally, the cluster turned back to green again, oh yeah!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we saw the red index caused by the use of Force Merge API. With the help of the Elastic forum, I tried to fix the data through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.shard.check_on_startup: fix&lt;/code&gt;, but this option no longer exists in Elasticsearch 7. We saw that through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allocate_empty_primary&lt;/code&gt; it is possible to accept partial data loss and keep the remaining healthy fragments, but we did not do this because we wanted to get all the data back. Next, we used the CheckIndex tool to repair at the Lucene level and found that there was no data corruption, which was actually a false alarm. Finally, remove the data corruption label file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corrupted_*&lt;/code&gt; to realize recovery.&lt;/p&gt;

&lt;p&gt;I hope this article about Elasticsearch in practice can bring you some new inspiration. If you are interested in learning more about Elasticsearch, please follow my GitHub account &lt;a href=&quot;https://github.com/mincong-h&quot; title=&quot;mincong-h&quot;&gt;mincong-h&lt;/a&gt;. Thank you all!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Matthias Wilhelm, “Corrupted elastic index”, &lt;em&gt;Elastic.co&lt;/em&gt;, 2021.
&lt;a href=&quot;https://discuss.elastic.co/t/corrupted-elastic-index/135932&quot;&gt;https://discuss.elastic.co/t/corrupted-elastic-index/135932&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="elasticsearch" /><category term="elasticsearch" /><category term="elasticsearch-7" /><category term="java" /><summary type="html">How to fix corrupted index in Elasticsearch cluster without snapshot?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-jonnica-hill-V5nq6u-Ce_U-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-jonnica-hill-V5nq6u-Ce_U-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Custom Internationalization (i18n) with Jekyll</title><link href="https://mincong.io/en/jekyll-i18n/" rel="alternate" type="text/html" title="Custom Internationalization (i18n) with Jekyll" /><published>2021-07-11T22:02:53+02:00</published><updated>2021-07-11T22:02:53+02:00</updated><id>https://mincong.io/en/jekyll-i18n</id><content type="html" xml:base="https://mincong.io/en/jekyll-i18n/">&lt;p class=&quot;info&quot;&gt;This article is translated with www.DeepL.com/Translator (free version) and reviewed by Mincong.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;During my visit to my family back home in April this year, I came across a lot of technical content in Chinese when I was looking for information, but I also found that not many of them have good quality. So I started to write Chinese articles in my blog, hoping to contribute to the Chinese developer community. More concretely, I wrote in two languages: Chinese and English. But in practice, I found that it is not a good experience for reader to see two languages in one blog.&lt;/p&gt;

&lt;p&gt;After I started writing in Chinese, several times my colleagues found my popular English articles in Google Search and started reading them. This thing made me embarrassed, because since April, my articles are all in Chinese. Let me think about it from their point of view: what happens if after reading, they are curious to read more articles? They may click on the home page and then surprised to see a bunch of Chinese blogs: they may feel confused and feel like they are in the wrong place. For someone who doesn’t know another language, the experience can be very bad. The opposite also holds true: when a Chinese friend sees my blog and sees a bunch of English articles, it feels hard to get interested in reading them. If the articles are written in their native language, it will be much more user-friendly.&lt;/p&gt;

&lt;p&gt;That’s why I want to do internationalization: I want to provide a comfortable reading experience for every reader. I want to have a clear distinction between the different languages in the blog, so that when people visit, they can read the content in the language they are familiar with, no matter which page they click on. Then the blog itself can also provide options for people to switch to another language.&lt;/p&gt;

&lt;p&gt;This post will share with you the internationalization of my blog.&lt;/p&gt;

&lt;h2 id=&quot;proposals&quot;&gt;Proposals&lt;/h2&gt;

&lt;p&gt;There are serveral proposals for internationalization, and I’ll discuss their feasibility below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Provide translation feature. Embed translation button in the article and use third-party translators (Bing, Google, DeepL, etc.) to translate when user clicks the translation button.&lt;/li&gt;
  &lt;li&gt;Interlink English and Chinese articles. Embed a link to English article in Chinese article and another link to Chinese article in English article.&lt;/li&gt;
  &lt;li&gt;Introduce the concept of page key. Chinese and English articles share the same page key.&lt;/li&gt;
  &lt;li&gt;Use two collections: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;mark&gt;Final plan: Use two collections.&lt;/mark&gt;&lt;/p&gt;

&lt;h3 id=&quot;proposal-1-provide-translation-feature&quot;&gt;Proposal 1: Provide Translation Feature&lt;/h3&gt;

&lt;p&gt;Embed a translation button inside the article and use a third-party translator (Bing, Google, DeepL, etc.) to translate when the translation button is clicked. The rationale is that my blog is not very visited, with about 18,000 visitors per month. And I am not a professional writer, purely writing for fun and not making money. There is no need to be so serious. This feature is inspired by Chrome’s Translate button, which allows you to translate a page in a non-frequently used language by clicking the Translate button in the URL input field, or by right-clicking on the page content.&lt;/p&gt;

&lt;p&gt;The advantages of this proposal are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s easy to implement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages of this proposal are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are no two articles, there is only one.&lt;/li&gt;
  &lt;li&gt;No correction for translation results&lt;/li&gt;
  &lt;li&gt;Without articles, we can’t attract readers through articles&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proposal-2-interlinking-english-and-chinese-posts&quot;&gt;Proposal 2: Interlinking English and Chinese Posts&lt;/h3&gt;

&lt;p&gt;Add a link to the corresponding article at the beginning of each article in order to switch languages. That is, embed a link to an English article in a Chinese article and a link to a Chinese article in an English article. On the web page, add a button or an icon to achieve language switching. This way, readers can access another language version of the article by clicking this button or this icon while reading.&lt;/p&gt;

&lt;p&gt;For example, for the article &lt;a href=&quot;/cn/mongodb-schema-compatibility/&quot;&gt;“Implementing backward-compatible schema changes in MongoDB”&lt;/a&gt;, the switch between the English and Chinese versions of the article can be implemented in the following form.&lt;/p&gt;

&lt;p&gt;English version.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ---
  layout: post
  title: Making Backward-Compatible Schema Changes in MongoDB
  date: 2021-02-27 17:07:27 +0100
  categories: [java-serialization, reliability]
  tags: [java, mongodb, serialization, jackson, reliability]
  comments: true
&lt;span class=&quot;gi&quot;&gt;+ lang: en
+ version:
+ en-CN: 2021-04-30-mongodb-schema-compatibility.md
&lt;/span&gt;  ...
  ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Chinese version.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ---
  layout: post
  title: Is it really that easy to add and delete fields in MongoDB?
  date: 2021-04-30 23:09:38 +0800
  categories: [java-serialization, reliability]
  tags: [java, mongodb, serialization, jackson, reliability]
  comments: true
&lt;span class=&quot;gi&quot;&gt;+ lang: zh
+ version:
+ en-US: 2021-02-27-mongodb-schema-compatibility.md
&lt;/span&gt;  ...
  ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The advantages of this proposal are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The links to existing articles remain unchanged and do not affect SEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages of this proposal are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is not possible to know the link of another version of the other article through the article link.&lt;/li&gt;
  &lt;li&gt;If you change the link to the article, you should remember to change the referer, i.e. in the other language page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proposal-3-shared-page-key-between-chinese-and-english&quot;&gt;Proposal 3: Shared Page Key between Chinese and English&lt;/h3&gt;

&lt;p&gt;Introduce the concept of page key in each article. When a user accesses the article, the page URL contains both the language and the page key. More precisely, it follows the following expression.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/{lang}/{page-key}
https://mincong.io/en/mongodb-schema-compability
https://mincong.io/cn/mongodb-schema-compability
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;English version (ideal state).&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ---
  layout: post
  title: Making Backward-Compatible Schema Changes in MongoDB
  date: 2021-02-27 17:07:27 +0100
  categories: [java-serialization, reliability]
  tags: [java, mongodb, serialization, jackson, reliability]
  comments: true
&lt;span class=&quot;gi&quot;&gt;+ key: mongodb-schema-compatibility
+ lang: en
&lt;/span&gt;  ...
  ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Chinese version (ideal state).&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ---
  layout: post
  title: Is it really that easy to add and delete fields in MongoDB?
  date: 2021-04-30 23:09:38 +0800
  categories: [java-serialization, reliability]
  tags: [java, mongodb, serialization, jackson, reliability]
  comments: true
&lt;span class=&quot;gi&quot;&gt;+ key: mongodb-schema-compatibility
+ lang: zh
&lt;/span&gt;  ...
  ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The advantage of this proposal are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The article link contains the language. So you can also know the link of the other version by naming convension.&lt;/li&gt;
  &lt;li&gt;Hide date from URL&lt;/li&gt;
  &lt;li&gt;Thanks to the permalink pattern, you can write two articles a day (Chinese + English), which was not possible before when using date + title as URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages of this proposal are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May affect SEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Originally this was my perferred solution. Unfortunately it is not possible to implement. Because not all variables are available as part of Jekyll’s permalink. For example, Jekyll does not support custom variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang&lt;/code&gt; as part of a link. See the official documentation &lt;a href=&quot;https://jekyllrb.com/docs/permalinks/&quot;&gt;Permalinks&lt;/a&gt; for variables supported by Permalinks.&lt;/p&gt;

&lt;h3 id=&quot;proposal-4-use-two-collections&quot;&gt;Proposal 4: Use Two Collections&lt;/h3&gt;

&lt;p&gt;The first collection is the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; and the second collection is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The advantage of this is the same as proposal 3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The article link contains the language. So you can also know the link of the other version by naming convension.&lt;/li&gt;
  &lt;li&gt;Hide date from URL&lt;/li&gt;
  &lt;li&gt;Thanks to the permalink pattern, you can write two articles a day (Chinese + English), which was not possible before when using date + title as URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The downside of this are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The default plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt; only supports pagination for the default collection posts. If you need to paginate another collection, you need to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-paginate-v2&lt;/code&gt; plugin. However, GitHub Pages does not officially support the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-paginate-v2&lt;/code&gt; plugin.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-considerations&quot;&gt;Other Considerations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Whether the theme you are currently using has support for internationalization? For example, I use &lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme&quot;&gt;Jekyll TeXt Theme&lt;/a&gt;, which has some support for internationalization itself. The information in the header and footer of the browsing page can be automatically adjusted according to the language of the page. However, it does not translation for the page content directly.&lt;/li&gt;
  &lt;li&gt;If you’re using GitHub Pages, consider whether GitHub Pages has support for the plugins that you use. Only some of the Jekyll plugins are officially supported by GitHub, and others won’t work even if you install them. This will affect you unless you don’t use the official site generation, you can generate pages locally yourself or generate them from your custom CI pipeline.&lt;/li&gt;
  &lt;li&gt;Consider using another Jekyll internationalization plugin, such as &lt;a href=&quot;https://github.com/kurtsson/jekyll-multiple-languages-plugin&quot;&gt;jekyll-multiple-languages-plugin&lt;/a&gt;. I didn’t look into it at the time I wrote the proposals, and only found out about this plugin after the project was done… But this plugin is not supported by GitHub Pages neither.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-websites&quot;&gt;Other Websites&lt;/h2&gt;

&lt;p&gt;How do other blogs work? Is there anything we can learn from them?&lt;/p&gt;

&lt;h3 id=&quot;elasticsearch-blog&quot;&gt;Elasticsearch Blog&lt;/h3&gt;

&lt;p&gt;Elastic’s blog is internationalized, and each article is available in multiple languages, such as the following article: &lt;a href=&quot;https://www.elastic.co/cn/blog/how-to-design-your-elasticsearch-data-storage-architecture-for-scale&quot;&gt;How to design a scalable Elasticsearch data storage architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210711-elasticsearch-blog.png&quot; alt=&quot;Elasticsearch blog i18n&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is listed below in three languages.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Language&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Links&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;How to design your Elasticsearch data storage architecture for scale&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://www.elastic.co/blog/how-to-design-your- elasticsearch-data-storage-architecture-for-scale&quot;&gt;https://www.elastic.co/blog/how-to-design-your- elasticsearch-data-storage-architecture-for-scale&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;How to design your Elasticsearch data storage architecture for scale&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://www.elastic.co/cn/blog/how-to-design-your-elasticsearch-data-storage-architecture-for- scale&quot;&gt;https://www.elastic.co/cn/blog/how-to-design-your-elasticsearch-data-storage-architecture-for- scale&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;スケーラブルなElasticsearchデータストレージを设计する&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://www.elastic.co/jp/blog/how-to-design-your-elasticsearch-data-storage-architecture-for -scale&quot;&gt;https://www.elastic.co/jp/blog/how-to-design-your-elasticsearch-data-storage-architecture-for -scale&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is named in the following way.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.elastic.co/blog/{post}
https://www.elastic.co/{country}/blog/{post}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;English blogs do not have EN prefix, other languages use country abbreviation as prefix, for example, CN for China, JP for Japan.&lt;/p&gt;

&lt;h3 id=&quot;text-theme&quot;&gt;TeXt Theme&lt;/h3&gt;

&lt;p&gt;Jekyll TeXt Theme is a highly customizable Jekyll theme for personal or team websites, blogs, projects, documents and more. It references the iOS 11 style with big and prominent headers and rounded buttons and cards. It was written by Alibaba’s engineer Tian Qi (&lt;a href=&quot;https://github.com/kitian616&quot;&gt;kitian616&lt;/a&gt;). This theme supports &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/zh/i18n&quot;&gt;internationalization&lt;/a&gt;. In fact, the documentation of this theme itself is internationalized. If you don’t believe me, see this table:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Language&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Links&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Quick Start&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/quick-start&quot;&gt;https://tianqi.name/jekyll-TeXt-theme/docs/en/quick-start&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Quick Start&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/zh/quick-start&quot;&gt;https://tianqi.name/jekyll-TeXt-theme/docs/zh/quick-start&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is named in the following way.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://tianqi.name/jekyll-TeXt-theme/docs/{lang}/{post}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whatever the language, the language abbreviation is used as the prefix, for example, zh for Chinese, en for English.&lt;/p&gt;

&lt;h2 id=&quot;final-solution&quot;&gt;Final solution&lt;/h2&gt;

&lt;p&gt;The final solution is proposal 4: use two collections. The first collection is the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; and the second collection is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;. The main goal is to modify the article links to the following format.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/{country}/{post}
https://mincong.io/{country}/{page}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The two parts of the link here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country&lt;/code&gt; is the country, EN for English-speaking countries and CN for China. This expression was better than using locale en/zh because it’s not only a matter of language, but also the components loaded by the page: for example, the Chinese page will suggest WeChat but not the English version. In the future, I’ll also consider splitting the other components into two different versions: Chinese and English pages load different comment systems, different SEO scripts, etc.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; is the ID of the blog post or the ID of another page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, I want to share with you the specific tasks that need to be done when implementing internationalization.&lt;/p&gt;

&lt;h2 id=&quot;tasks&quot;&gt;Tasks&lt;/h2&gt;

&lt;p&gt;This section is a detailed explanation of the main tasks that need to be done. This section may be a bit long, it’s mainly for those who are interested in changing their blogs for real. If you don’t want to internationalize your site, I suggest avoid reading it into details.&lt;/p&gt;

&lt;h3 id=&quot;task-1-modify-chinese-articles&quot;&gt;Task 1: Modify Chinese Articles&lt;/h3&gt;

&lt;p&gt;Modify the article link to the following format.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/cn/{post}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since most of the Chinese articles were written after April this year, there is no need to keep the original links. At the beginning of each article, add two pieces of information: language and link redirection.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gi&quot;&gt;+ lang: zh
&lt;/span&gt;  date: 2021-04-20 11:21:16 +0800
  categories: [java-core]
  tags: [java, akka]
&lt;span class=&quot;p&quot;&gt;@@ -13,6 +14,8 @@&lt;/span&gt; excerpt: &amp;gt;
  image: /assets/bg-ocean-ng-L0xOtAnv94Y-unsplash.jpg
  cover: /assets/bg-ocean-ng-L0xOtAnv94Y-unsplash.jpg
&lt;span class=&quot;gi&quot;&gt;+ redirect_from:
+ - /2021/04/20/exponential-backoff-in-akka/
&lt;/span&gt;  article_header:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a new collection called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;. Store it in the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_cn&lt;/code&gt; according to Jekyll naming requirements, then put all Chinese articles in that folder and remove the “year, month and day” part of the file name.&lt;/p&gt;

&lt;p&gt;Changes in article links.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Before: &lt;a href=&quot;https://mincong.io/2021/04/30/mongodb-schema-compatibility/&quot;&gt;https://mincong.io/2021/04/30/mongodb-schema-compatibility/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;After: &lt;a href=&quot;https://mincong.io/cn/mongodb-schema-compability/&quot;&gt;https://mincong.io/cn/mongodb-schema-compability/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, in the global configuration file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;), configure the information about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt; collection, such as the permalink, whether to display the table of contents, etc. For details, see: &lt;a href=&quot;https://github.com/mincong-h/mincong-h.github.io/pull/31&quot;&gt;https://github.com/mincong-h/mincong-h.github.io/pull/31&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-2-modify-english-articles&quot;&gt;Task 2: Modify English Articles&lt;/h3&gt;

&lt;p&gt;I have 168 English articles on my blog, some of which have important page views. I don’t want them to lose any information because of the internationalization, such as comments and likes on Disqus. So my strategy for English articles is to not make any changes to existing articles and only change the new articles. For new articles, I use the new naming convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mincong.io/en/{post}&lt;/code&gt;. In the following paragraphs, let’s discuss it further.&lt;/p&gt;

&lt;p&gt;For all existing articles, explicitly mark the article language as English in the front matter at the article level.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find _posts &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/date:/i lang: en'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; +
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And after adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permalink&lt;/code&gt; so that they are not interfered with by the global configuration.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;find &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/github/mincong-h.github.io/_posts&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.md&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;path &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;  | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^([[:digit:]]+)-([[:digit:]]+)-([[:digit:]]+)-(. *)\.md/\1/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^([[:digit:]]+)-([[:digit:]]+)-([[:digit:]]+)-(. *)\.md/\2/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;   | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^([[:digit:]]+)-([[:digit:]]+)-([[:digit:]]+)-(. *)\.md/\3/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;  | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^([[:digit:]]+)-([[:digit:]]+)-([[:digit:]]+)-(. *)\.md/\4/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: year=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, month=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, day=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, name=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, permalink=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/comments:/i\
permalink: PERMALINK
'&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s|PERMALINK|&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;i &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For new articles, use the new naming convention (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- permalink: /:year/:month/:day/:title/
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ permalink: /en/:title/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also you need to modify the post generation script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newpost.sh&lt;/code&gt; to make it generate both Chinese and English posts. Here is an excerpt from the script: we generate the paths for both Chinese and English posts, confirm that they do not exist, and then add new content.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;:1&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'usage: newpost.sh My New Blog'&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bloghome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:upper:]'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:lower:]'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +&lt;span class=&quot;s2&quot;&gt;&quot;%Y-%m-%d&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.md&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;filepath_en&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bloghome&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/_posts/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;filepath_cn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bloghome&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/_cn/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filepath_en&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filepath_en&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; already exists.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filepath_cn&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filepath_cn&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; already exists.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;append_metadata_en &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filepath_en&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
append_metadata_cn &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filepath_cn&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Not for EN, because EN post is translated.&lt;/span&gt;
append_content &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filepath_cn&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Blog posts created!&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; EN: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filepath_en&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; CN: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filepath_cn&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more details, see: &lt;a href=&quot;https://github.com/mincong-h/mincong-h.github.io/pull/37&quot;&gt;https://github.com/mincong-h/mincong-h.github.io/pull/37&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-3-adding-a-chinese-homepage&quot;&gt;Task 3: Adding a Chinese Homepage&lt;/h3&gt;

&lt;p&gt;Adding a Chinese homepage sounds easy, as if all you need to do is copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; from the blog home page to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn/index.html&lt;/code&gt; and translate a few words. Actually, it is way more complex than that. I use the official Jekyll plugin jekyll-paginate (v1) for my home page. But this plugin only supports pagination for the default set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt;, not for other sets, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;. So the real meaning of adding a Chinese homepage is to upgrade the plugin to jekyll-paginate-v2 to support pagination for the Chinese collection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install and use the new plugin in the site configuration (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;) at&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- paginate: 8
- paginate_path: /page:num # don't change this unless for special need
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ pagination:
+   enabled: true
+   per_page: 8
&lt;/span&gt;

  ## =&amp;gt; Sources
&lt;span class=&quot;p&quot;&gt;@@ -238,7 +240,7 @@&lt;/span&gt; defaults:
  ##############################
  plugins:
    - jekyll-feed
&lt;span class=&quot;gd&quot;&gt;-   - jekyll-paginate
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+   - jekyll-paginate-v2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modified the paginator of the TeXt Theme theme itself to avoid using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.posts&lt;/code&gt; directly as a source for posts. And also add a specific prefix to the homepage, so that English and Chinese have their own homepage, i.e. &lt;a href=&quot;https://mincong.io/&quot;&gt;https://mincong.io/&lt;/a&gt; and &lt;a href=&quot;https://mincong.io/cn/&quot;&gt;https://mincong.io/cn/&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- {%- assign _post_count = site.posts | size -%}
&lt;span class=&quot;gi&quot;&gt;+ {%- assign _post_count = paginator.total_posts -%}
&lt;/span&gt;      {%- assign _page_count = paginator.total_pages -%}
      &amp;lt;p&amp;gt;{{ _locale_statistics | replace: '[POST_COUNT]', _post_count | replace: '[PAGE_COUNT]', _page_count }}&amp;lt;/p&amp;gt;
      &amp;lt;div class=&quot;pagination__menu&quot;&amp;gt;
&lt;span class=&quot;p&quot;&gt;@@ -51,7 +51,7 @@&lt;/span&gt;
              &amp;lt;/li&amp;gt;

            {%- elsif page == 1 -%}
&lt;span class=&quot;gd&quot;&gt;-             {%- assign _home_path = site.paths.home | default: site.data.variables.default.paths.home -%}
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+             {%- assign _home_path = site.paths.home | default: site.data.variables.default.paths.home | append: include.baseurl -%} 
&lt;/span&gt;              {%- include snippets/prepend-baseurl.html path=_home_path -%} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are actually some other modifications to consider, but I won’t expand on them due to the timing. Here is the final result for the home page, a comparison between English and Chinese:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210711-diff-home.png&quot; alt=&quot;comparison for the home page between English and Chinese&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more details see: &lt;a href=&quot;https://github.com/mincong-h/mincong-h.github.io/pull/32&quot;&gt;https://github.com/mincong-h/mincong-h.github.io/pull/32&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-4-modifying-build-and-deployment&quot;&gt;Task 4: Modifying Build and Deployment&lt;/h3&gt;

&lt;p&gt;You can no longer use the old automatic deployment method because of jekyll-paginate-v2, a plugin that is not officially supported by GitHub. Now you need to deploy it manually or via the CI. That is, you no longer deploy from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch. After the code is merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;, the new pages are generated manually or by CI (core command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;). Then, the generated content, which is in the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;, is uploaded to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch for deployment.&lt;/p&gt;

&lt;p&gt;To do it manually, the main steps are as follows: create a new, master-independent branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;, add an empty commit as the start of the branch, then empty the local Jekyll generated files folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; and connect it to the new branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &lt;span class=&quot;nt&quot;&gt;--orphan&lt;/span&gt; gh-pages
git commit &lt;span class=&quot;nt&quot;&gt;--allow-empty&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Initialize gh-pages&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; _site
git worktree add _site gh-pages
&lt;span class=&quot;c&quot;&gt;# &quot;jekyll build&quot; or equivalent commands&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To implement this task, you also need to change the branch to deploy from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ph-pages&lt;/code&gt; in the GitHub project settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210711-deploy-via-gh-pages.png&quot; alt=&quot;Change the deployment method: no longer use master branch but gh-pages branch deployment&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more information, see: Sangsoo Nam, &lt;a href=&quot;https://sangsoonam.github.io/2019/02/08/using-git-worktree-to-deploy- github-pages.html&quot;&gt;Using Git Worktree to Deploy GitHub Pages&lt;/a&gt;, 2019.&lt;/p&gt;

&lt;p&gt;To do it via the CI (GitHub Actions in my case), you can use the following workflow：&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy to GitHub Pages&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# testing&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build-and-deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout source code&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;persist-credentials&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Ruby&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby/setup-ruby@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.6&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Not needed with a .ruby-version file&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;bundler-cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# runs 'bundle install' and caches installed gems automatically&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install dependencies in the Gemfile&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;bundler install --path vendor/bundle&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build Jekyll website&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy GitHub Pages&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JamesIves/github-pages-deploy-action@4.1.4&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;task-5-modifying-more-pages&quot;&gt;Task 5: Modifying More Pages&lt;/h3&gt;

&lt;p&gt;In the task above, we mainly mentioned modifications for Chinese articles and English articles. But a website has many other pages besides articles, such as categories, series, archives, about, etc. These pages also need to be modified before they can be used properly.&lt;/p&gt;

&lt;p&gt;The main objective is to ensure a consistent user-experience for browsing. When navigating between pages, all links in English pages will lead to English pages, and all links in Chinese pages will lead to Chinese pages. This creates a comfortable reading experience for the user: because all pages are in a language they are familiar with. As for the pages that already exist, we need to redirect them to the new links. The following is a list of new pages and the redirection of existing pages.&lt;/p&gt;

&lt;p&gt;Home page:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/
https://mincong.io/cn/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Category pages:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/en/categories/
https://mincong.io/en/categories/{category}/
https://mincong.io/cn/categories/
https://mincong.io/cn/categories/{category}/

https://mincong.io/categories/ -&amp;gt; https://mincong.io/en/categories/
https://mincong.io/categories/{category} -&amp;gt; https://mincong.io/en/categories/{category}/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Series pages:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/en/series/
https://mincong.io/en/series/{serie}/
https://mincong.io/cn/series/

https://mincong.io/series/ -&amp;gt; https://mincong.io/en/series/
https://mincong.io/series/{serie} -&amp;gt; https://mincong.io/en/series/{serie}/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;About page:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/en/about/
https://mincong.io/cn/about/

https://mincong.io/about/ -&amp;gt; https://mincong.io/en/about/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Archived pages:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mincong.io/en/archive/
https://mincong.io/cn/archive/

https://mincong.io/archive/ -&amp;gt; https://mincong.io/en/archive/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information, see: &lt;a href=&quot;https://github.com/mincong-h/mincong-h.github.io/pull/34&quot;&gt;https://github.com/mincong-h/mincong-h.github.io/pull/34&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-6-language-switching-button&quot;&gt;Task 6: Language Switching Button&lt;/h3&gt;

&lt;p&gt;Provide a language switch button in the website to enable languange switching. There are two main buttons here: one in the top right corner of the page, displayed as a flag, and another button in the title section of the article, highlighted in red for the current language and white for the optional other languages. The difference between these two buttons is that the top-right button will switch to the home page in another language when clicked, while the language button on the page will make the page jump directly to another version of the same article. I call them “global switching” and “article switching” feature.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210711-post-en.png&quot; alt=&quot;English post page example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210711-post-cn.png&quot; alt=&quot;Chinese article page example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the global switching feature, the main tasks are to write the flag, link, and other information of another language in the configuration file of the page navigation, and then use these information when the page is generated.&lt;/p&gt;

&lt;p&gt;Register information to the data file of the page navigation (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;# switch to the other langage&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;urls2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;en &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/cn/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;zh &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;urls2_src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;en &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/assets/flag-CN.png&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;zh &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/assets/flag-US.png&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;urls2_alt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;en &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Switch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Chinese&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;zh &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Switch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;English&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The header (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/header.html&lt;/code&gt;) should include this element as well.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ _site_root2 }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ _site_root2_src }}&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ _site_roo2_alt }}&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigation__lang_img&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the local toggle feature, the implementation is quite different. This is achieved by looking for articles with the same name in a collection of other languages. Here, articles in different languages must use the same filename, otherwise they cannot be found. Specifically, we first get the article ID, then extract the characters after the last slash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; (with the slash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;), then take this information to traverse other collections and return the corresponding link:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_filename&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_suffix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_filename&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_matched&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where_exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;item.id contains _suffix&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_matched&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;__return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;__return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information, see.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mincong-h/mincong-h.github.io/pull/34&quot;&gt;https://github.com/mincong-h/mincong-h.github.io/pull/34&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mincong-h/mincong-h.github.io/pull/36&quot;&gt;https://github.com/mincong-h/mincong-h.github.io/pull/36&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;remaining-tasks&quot;&gt;Remaining Tasks&lt;/h3&gt;

&lt;p&gt;Having done this, the entire internationalization task is basically done. The following tasks can be addressed in the future to improve the situation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Implement both Chinese and English RSS feeds.&lt;/li&gt;
  &lt;li&gt;Load more Chinese components on Chinese pages, such as loading WeChat’s SDK for sharing, loading Baidu’s SDK to improve search presence on Chinese search engine, replacing Disqus with another commenting system that can be loaded in mainland China without VPN, and links to other Chinese developer platforms.&lt;/li&gt;
  &lt;li&gt;Automate the Chinese-to-English translation by scripting translation requests directly to third-party translation platforms, such as Google Translate, DeepL, etc.&lt;/li&gt;
  &lt;li&gt;Automate the build and deployment process, e.g. take inspiration from MrPowerScripts’ article &lt;a href=&quot;https: //mrpowerscripts.com/github-pages-circleci-jekyll-pagination-v2/&quot;&gt;How to get around the jekyll-pagination-v2 limitation of GitHub pages with CircleCI&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Fix the tag-cloud feature in the archive page. The tag-cloud currently uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.tags&lt;/code&gt; for tag-related statistics. However, all the tags of Chinese articles (under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt; collection) are not taken into account.&lt;/li&gt;
  &lt;li&gt;Fix the article category pages. Now the category page can show text in Chinese, but the actual article list is retrieved from English collection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; rather than Chinese collection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have other suggestions, please feel free to leave a comment!&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from this article?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’ve never heard of Jekyll, you can visit &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;official website&lt;/a&gt; to learn about this great blogging engine.&lt;/li&gt;
  &lt;li&gt;If you’ve never tried the free &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, visit the official website and try to build your and host your own personal blog for free!&lt;/li&gt;
  &lt;li&gt;If you haven’t tried &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/&quot;&gt;Jekyll TeXt Theme&lt;/a&gt; by Qi Tian, maybe you would like to try it.&lt;/li&gt;
  &lt;li&gt;If you want to learn more about &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;jekyll-paginate-v2&lt;/a&gt;, you can visit their GitHub project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we have seen the process of internationalizing of this site &lt;a href=&quot;https://mincong.io&quot;&gt;https://mincong.io&lt;/a&gt;, an internationalization based on Jekyll and TeXt Theme. We compared the pros and the cons of the four proposals; we looked at other blogs’ implementations of internationalization; we listed the six of the more important tasks; and we looked further into the next steps for internationalization. Finally, I also share some resources for you to going further from this article. I hope this article has given you some insights. If you’re interested in more information and advice, please follow me on GitHub &lt;a href=&quot;https://github.com/mincong-h&quot;&gt;mincong-h&lt;/a&gt;. Thank you all!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Elastic, “Elastic Blog”, Elastic, 2021. &lt;a href=&quot;https://www.elastic.co/cn/blog/&quot;&gt;https://www.elastic.co/cn/blog/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MrPowerScripts, “How to get around the jekyll-pagination-v2 limitation of GitHub pages with CircleCI”, MrPowerScripts, 2019. &lt;a href=&quot;https://mrpowerscripts.com/github-pages-circleci-jekyll-paginate-v2/&quot;&gt;https://mrpowerscripts.com/github-pages-circleci-jekyll-paginate-v2/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sangsoo Nam, “Using Git Worktree to Deploy GitHub Pages”, Sangsoo Nam, 2019. &lt;a href=&quot;https://sangsoonam.github.io/2019/02/08/using-git- worktree-to-deploy-github-pages.html&quot;&gt;https://sangsoonam.github.io/2019/02/08/using-git- worktree-to-deploy-github-pages.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jekyll, “Jekyll Documentation”, Jekyll, 2021. &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;https://jekyllrb.com/docs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sverrir Sigmundarson, “jekyll-paginate-v2”, GitHub, 2021. &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;https://github.com/sverrirs/jekyll-paginate-v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tian Qi, “Internationalization”, TeXt Theme, 2021.
&lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/i18n&quot;&gt;https://tianqi.name/jekyll-TeXt-theme/docs/en/i18n&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rahul Patil, “How to insert text after a certain string in a file?”, Unix &amp;amp; Linux - Stack Exchange, 2014. &lt;a href=&quot;https://unix. stackexchange.com/a/121173/220624&quot;&gt;https://unix. stackexchange.com/a/121173/220624&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Taewoo Lee, “[Jekyll](EN) Make array and add element in liquid”, TWpower’s Tech Blog, 2020. &lt;a href=&quot;https://twpower.github.io/228- make-array-and-add-element-in-jekyll-liquid-en&quot;&gt;https://twpower.github.io/228- make-array-and-add-element-in-jekyll-liquid-en&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="jekyll" /><category term="jekyll" /><category term="i18n" /><summary type="html">One blog and two languages: bringing a better reading experience for the readers! This article shares how I internationalize my blog https://mincong.io</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-chuttersnap-aku7Zlj_x_o-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-chuttersnap-aku7Zlj_x_o-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">An Important Change</title><link href="https://mincong.io/2021/04/20/an-important-change/" rel="alternate" type="text/html" title="An Important Change" /><published>2021-04-20T04:40:32+02:00</published><updated>2021-04-20T04:40:32+02:00</updated><id>https://mincong.io/2021/04/20/an-important-change</id><content type="html" xml:base="https://mincong.io/2021/04/20/an-important-change/">&lt;p&gt;Hi my readers,&lt;/p&gt;

&lt;p&gt;Currently I am traveling to Tianjing (天津) and writing this article in my hotel. In
China, we cannot access to the internet the same way as others do in other
countries. So the searching experience is completely different. Because of this,
I discovered how painful it is for Chinese developers to search some
documentations for their daily work. Also, most of the people don’t speak fluent
English. Therefore, I think I should make some effort to make their lives easier.
So I want to write articles in Chinese to better help them.
Makig this decision is really hard. Because writing in Chinese means the rest of
the world won’t understand these articles anymore. But I want to try something
new.&lt;/p&gt;

&lt;p&gt;I am also writing this article to thank all those who follow my blog and give my precious
feedback. I hope my articles bring you some inspirations to your work. Thank
you!&lt;/p&gt;

&lt;p&gt;Here is my plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;mark&gt;Starting from this article, most of the new articles will be written in
Chinese.&lt;/mark&gt;&lt;/li&gt;
  &lt;li&gt;Existing articles won’t be deleted.&lt;/li&gt;
  &lt;li&gt;I will still use the same feed.&lt;/li&gt;
  &lt;li&gt;I will try to add a Google translater to automatically translate the content of the
article. I cannot do that right now because I don’t have access to Google…&lt;/li&gt;
  &lt;li&gt;The blog will be progressively internationalized to be more Chinese friendly.
It means that the nagivations, post metadata and footer will support both EN
and CN depending on the settings of the OS or the broswer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! Best,&lt;/p&gt;

&lt;p&gt;Mincong&lt;/p&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="review" /><category term="project" /><summary type="html">English to Chinese?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-javier-allegue-barros-C7B-ExXpOIE-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-javier-allegue-barros-C7B-ExXpOIE-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">DVF: Real Estate Analysis For Île-de-France in 2020</title><link href="https://mincong.io/2021/04/16/dvf-real-estate-analysis-idf-2020/" rel="alternate" type="text/html" title="DVF: Real Estate Analysis For Île-de-France in 2020" /><published>2021-04-16T02:03:43+02:00</published><updated>2021-04-16T02:03:43+02:00</updated><id>https://mincong.io/2021/04/16/dvf-real-estate-analysis-idf-2020</id><content type="html" xml:base="https://mincong.io/2021/04/16/dvf-real-estate-analysis-idf-2020/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Open data &lt;a href=&quot;https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres-geolocalisees/&quot;&gt;“Demande de valeurs foncières géolocalisées
(DVF)”&lt;/a&gt;
is an open dataset provided by the French government which collects all the
real-estate transactions since January 2014, in mainland France and the overseas
departments and territories, except in Mayotte and Alsace-Moselle. Today, we are
going to explore this dataset using Elasticsearch and Kibana. In particular, we
are going to study the real estate market of Île-de-France in 2020.&lt;/p&gt;

&lt;p&gt;After reading this article, you will understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The prerequisite before the analytics&lt;/li&gt;
  &lt;li&gt;The overview of the market Île-de-France&lt;/li&gt;
  &lt;li&gt;The comparison of apartments and houses&lt;/li&gt;
  &lt;li&gt;Some more specific analytics on apartments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Globally, the idea is to see the big picture and identify some valuable factors to
study. Then step-by-step, we will go into a more specific direction to go
further in our exploration. Now, let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;

&lt;p&gt;Before the analytics, we need to prepare the dataset. Here, I am using
&lt;a href=&quot;https://www.elastic.co/elasticsearch/&quot;&gt;Elasticsearch&lt;/a&gt; and
&lt;a href=&quot;https://www.elastic.co/kibana/&quot;&gt;Kibana&lt;/a&gt;. For those who don’t know Elasticsearch, Elasticsearch
is a distributed, RESTful search and analytics engine. As for Kibana, Kibana is
a free and open user interface that lets you visualize your Elasticsearch data
and navigate the Elastic Stack. The steps of the preparation are mainly the following
ones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the dataset from &lt;a href=&quot;https://www.data.gouv.fr&quot;&gt;https://www.data.gouv.fr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Design the data model and index them into Elaticsearch&lt;/li&gt;
  &lt;li&gt;Optimize the storage for search&lt;/li&gt;
  &lt;li&gt;Set up Kibana and create dashboards to analyze the data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To set up Elasticsearch, you can use Docker: just running a Docker container in
localhost and
you are ready to go. The same thing applies to Kibana.
However, you need to give the name of the Elasticsearch cluster to Kibana so that they
can be linked together. Here, I am using the names “elasticsearch-dvf” and
“kibana-dvf” to achieve that. Once the setup is done and the indexing process is finished, you can
see all the data in Elasticsearch. There are several gigabytes (GB) of data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  curl &quot;localhost:9200/_cat/indices/transactions.*&quot;
yellow open transactions.2019 ExlbB3EuQSqk__4MEW6eHQ 1 1 3142952 0 802.3mb 802.3mb
yellow open transactions.2018 1B3pKi4URDar2w0vAvPysA 1 1 3319426 0 853.3mb 853.3mb
yellow open transactions.2017 HJLTdbbtSqW686jQFzgg7g 1 1 3381190 0 862.4mb 862.4mb
yellow open transactions.2016 ZNPlUNeTStS8KsOgvaMTww 1 1 2939004 0 753.5mb 753.5mb
yellow open transactions.2015 h2CEOxWzTYymAt9KBMasJg 1 1 2750305 0 704.1mb 704.1mb
yellow open transactions.2014 17ZVk9oMQ6KmvTpMgGdMBg 1 1 2516802 0 650.7mb 650.7mb
yellow open transactions.2020 Khw7RAl1RcCDeLlz8Blt7g 1 1 2459560 0 623.5mb 623.5mb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the Kibana side, we need to define an index pattern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transactions.*&lt;/code&gt; that
matches all the indices mentioned above.
Since this is not aimed to be a technical blog, I am going to skip the
technical details here. If you were interested in the entire preparation, you
can see my previous articles on the series page &lt;a href=&quot;/series/dvf&quot;&gt;“DVF”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Starting from the next section, we are going to analyze the data of
Île-de-France, the Greater Paris area. It consists of 8 departments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Paris (75)&lt;/li&gt;
  &lt;li&gt;Hauts-de-Seine (92)&lt;/li&gt;
  &lt;li&gt;Seine-Saint-Denis (93)&lt;/li&gt;
  &lt;li&gt;Val-de-Marne (94)&lt;/li&gt;
  &lt;li&gt;Seine-et-Marne (77)&lt;/li&gt;
  &lt;li&gt;Yvelines (78)&lt;/li&gt;
  &lt;li&gt;Essonne (91)&lt;/li&gt;
  &lt;li&gt;Val-d’Oise (95)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;transactions-2020&quot;&gt;Transactions 2020&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-mutation-count.png&quot; alt=&quot;2020 Ile-de-France mutation count&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all, let’s take a look at the global landscape of the real estate
market of Île-de-France in 2020. There were 146,084 transactions
happened in this area with 387,425 mutations (*). From the widget above, we can
see the number of mutations over the year. The real estate market was active
despite the pandemic. However, the number of transactions was greatly reduced
between the end of March and mid-May, probably because of the first lockdown measure
taken by the French government. After that period, the market quickly regained its dynamics.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(*) One mutation represents a transfer of ownership of a given premise. A premise
can be an apartment, a house, a cellar, etc. Each transaction contains one or
multiple mutations. For example, you can buy one apartment and one cellar in
the same transaction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;transactions-2014-to-2020&quot;&gt;Transactions 2014 To 2020&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-mutation-count-2014-to-2020.png&quot; alt=&quot;2014-2020 Ile-de-France mutation count&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we compare to the previous years, we can see that the market was impacted by
the COVID-19 in 2020. The total number of mutations decreased 19.5% (481,002 in 2019
vs 387,425 in 2020) in Île-de-France. Some contributing factors may be the COVID-19 measures
taken by the government (lockdown, curfew), the economic impact (partial
unemployment, complete unemployment), the psychological factor (uncertainty
about the future).&lt;/p&gt;

&lt;p&gt;Before going further, let’s spend some time understanding
which part of the dataset is the most valuable for the analysis. To do that, we
can aggregate the data per field and continue our study on the most significant ones.
Here I chose the field “nature of mutation” and the field “premise type”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-nature_mutation-and-local_type.png&quot; alt=&quot;2020 Ile-de-France distribution of nature of mutation and distribution of premise type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nature of mutation.&lt;/strong&gt; From the widget on the left side, you can see that there are several reasons
why people make a transaction: expropriation, vente terrain à bâtir
(building plot for sales), adjudication (judgement), échange (exchange), vente
(sales), and vente en l’état future d’achèvement” (sales before completion).
Most of the time it’s either “Vente” or “Vente en l’état future d’achèvement”.
That’s why I am going to focus my analysis on these two types in the following
sections.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Premise type.&lt;/strong&gt; From the widget on the right side, you can see the different types of premises
that people sell: local industriel, commercial ou assimilé (industrial,
commercial or related premise), maison (house), dépendance (dependent),
appartement (apartment), or empty. For those mutations having an empty type,
they can be meadows, lands, gardins, thickets, etc that we love but we
don’t have time to cover in this article. As for the “dependent” ones, they depend
on the main types: apartment, house, … where these mutations happen in the
same transaction. For example, a dependent can be a cellar. When someone buys an
apartment, he/she buys the cellar at the same time. So I am going to
filter them out as well.&lt;/p&gt;

&lt;p&gt;In short, we are going to look into the sales of apartments and houses in the
next sections.&lt;/p&gt;

&lt;h2 id=&quot;apartment-and-house&quot;&gt;Apartment And House&lt;/h2&gt;

&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;

&lt;p&gt;If we put all the sales of apartments and houses (first-hand and second-hand
combined) into a map, we can obtain the following result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-map-sales-apartments-and-houses-2020.png&quot; alt=&quot;Map: sales of apartments and houses in Ile-de-France in 2020&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This map is aggregated by the municipality (commune). The color represents the
average price per meter square (€/m2) of the municipality. You can see that the
most expensive ones are all located in Paris (75) in the middle of the map with
an average price higher than 9,449 €/m2. Other municipalities around Paris are 
also expensive, especially on the west side. These departements around Paris are
called “La Petite Couronne” (The . It consists of three departments: les
Hauts-de-Seine (92), la Seine-Saint-Denis (93), and le Val-de-Marne (94).&lt;/p&gt;

&lt;h3 id=&quot;first-hand-vs-second-hand&quot;&gt;First-Hand vs Second-Hand&lt;/h3&gt;

&lt;p&gt;If we split the market into first-hand and second-hand, you can see that they
are actually quite different. In the widgets below, we compare the first-hand
market and second-hard market for their volume in 2020. The first one is for the entire
Île-de-France and the second one is aggregated by the department.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-bar-sales-apartments-and-houses-2020-volumes.png&quot; alt=&quot;Bar chart: volume of apartments and houses in Ile-de-France in 2020&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the entire Île-de-France, the first-hand apartments and houses represent about 1.1% of
the total mutations and the second-hand ones represent 98.9%. On the right
side, you can see the actual volume of each department. The first series (red)
is for second-hand transactions and the second series (green) is for
first-hand transactions.
As you can see,
second-hand transactions represent 99.9% of the transactions in Paris (75).
In other departments, second-hand transactions represent
about 98.5% of the market. I believe that this ratio is probably related to
COVID-19 because historically speaking, the ratio of second-hand transactions is
about 93% (2014 to 2019).&lt;/p&gt;

&lt;h3 id=&quot;second-hand&quot;&gt;Second-Hand&lt;/h3&gt;

&lt;p&gt;Now, what if we focus on the second-hand market?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-bar-sales-apartments-and-houses-2020-second-hand-volumes.png&quot; alt=&quot;Bar chart: volume of second-hand apartments and houses in Ile-de-France in 2020&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we focus on the second-hand market, we can see that there is almost no house
to sell in Paris (75). The entire market is filled with apartments (30,956
mutations). If you want to buy a house,
you probably need to go to the petite gouronne (92, 93, 94) or the grande
gouronne (77, 78, 91, 95). They have more offers. As for the price, Paris (75) is
still the champion with an average of 11,673 €/m2 for houses and 14,959 €/m2 for
the apartments. Les Hauts-de-Seine (92), le Val-de-Marne (94), and la
Seine-Saint-Denis (93) follow Paris (75) and take the top 4.&lt;/p&gt;

&lt;p&gt;We are reaching the end of this section. In this section, we compared the
apartments and houses in Île-de-France. We
compared the type of sales, the volume, and the price in different departments.
In the next section, we are going to explore the market of second-hand
apartments.&lt;/p&gt;

&lt;h2 id=&quot;second-hand-apartments&quot;&gt;Second-Hand Apartments&lt;/h2&gt;

&lt;h3 id=&quot;price&quot;&gt;Price&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/20210416-idf-line-sales-apartments-price-evolution-per-department.png&quot; alt=&quot;Line chart: median price of second-hand apartments and houses in Ile-de-France from 2016 to 2020&quot; width=&quot;700&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;First of all, let’s take a look at the price. As you can see in the graph above,
the median price of Paris is significantly higher than other departments and
the trend continues in 2020 despite the global pandemic. The podium didn’t
change in 2020: les Hauts-de-Seine (92) is still in the 2nd position and followed by
le Val-de-Marne (94) at the 3rd position. However, the price of les
Hauts-de-Seine (92) dropped significantly alongside with la Seine-et-Marne (77).
If you want to have a more detailed version of the trends displayed above, here
a table of comparison for you. In this table, there is the median price of the
second-hand apartment for each department in 2015 (5 years ago), 2019 (1 year
ago), and 2020. It allows you to better follow the department that matches your
interest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table: Median Price of the second-hand apartments in Île-de-France&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Department&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;2015 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;5y Diff&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;2019 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;1y Diff&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;2020 (€/m2)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;75 - Paris&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,098&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+35.0%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,218&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+7.0%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,933&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;92 - Hauts-de-Seine&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,463&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+25.6%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,536&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+5.0%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,860&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;93 - Seine-Saint-Denis&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,266&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+25.2%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,848&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+6.3%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,089&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;94 - Val-de-Marne&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,122&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+21.5%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,733&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+5.8%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,009&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;77 - Seine-et-Marne&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,989&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+10.3%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,176&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+3.8%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,296&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;78 - Yvelines&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,685&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+7.6%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,899&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+1.5%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,956&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;91 - Essonne&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,729&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+8.7%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,946&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+0.5%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,960&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;95 - Val-d’Oise&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,877&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+10.7%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,071&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+3.7%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,184&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;pieces&quot;&gt;Pieces&lt;/h3&gt;

&lt;p&gt;Another important factor to take into account is the number of pieces. A single
person, a young couple, a family with 2 children, … they probably don’t have
the same needs. That’s why I want to study the number of pieces so that you can
find out what matches you most. Here is the distribution of the transactions grouped by the number
of pieces. The first one is for the entire Île-de-France and the second one is aggregated by department:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-composite-apartments-pieces-per-department-2020.png&quot; alt=&quot;Number of pieces for second-hand apartments and houses in Ile-de-France from 2016 to 2020&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;:warning: On the widget on the right side, the percentage is not shown in order.
The displayed order is 2, 5, 1, 3, and other. This is because
the term having the highest percentage has to be placed first in Kibana.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see that T1 and T2 represent about half of the offers in the market of
the second-hand apartments. T3 and T4 represent almost the other half. There are only a few
apartments having more than 4 pieces, maybe because people prefer houses over
apartments when they need more rooms.&lt;/p&gt;

&lt;h3 id=&quot;budget&quot;&gt;Budget&lt;/h3&gt;

&lt;p&gt;We talked about the price per meter square (€/m2) and the number of pieces
inside an apartment. But we didn’t talk about the total price — how many budgets
do you have? Are you ready to spend that amount of money or make a mortgage?
To let you better understand the situation, I prepared another widget. It tells
you what you can buy with a given range of budget (200K€, 400K€, 600K€, 800K€):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210416-idf-bar-apartments-total-price-range.png&quot; alt=&quot;Number of pieces for second-hand apartments and houses in Ile-de-France from 2016 to 2020&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The color is not great but I don’t have time to make it better. I hope that it
won’t bother you too much.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the widget above, we can find interesting information:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you have 200K€, you have a wide range of choices across all the
departments. You can buy an apartment at a reasonable price. It may not be
the best apartment that you want, but buying it will allow you to
start having your own property and stop wasting money on the apartment rent.
Based on the salary in Île-de-France and the constraint about the loan (up to 33%
net income), I think 200K€ is an important amount. Note that the choices are
much less for les Hauts-de-Seine (92) compared to other departments.&lt;/li&gt;
  &lt;li&gt;If you have 400K€, e.g. you are buying an apartment with your partner,
you can see that the range of choices is even larger. You should be able to
find something that fits your needs in each department.&lt;/li&gt;
  &lt;li&gt;For 400K€+, you can see that Paris (75) still has a lot of apartments that are
located in these ranges. They are super expensive. The buyers are probably not
normal residents but rather some real-estate investors (person or company)
or rich people. According to the Notary of France (Notaires de France), the
number of investors coming from foreign countries is not negligible. However,
the number reduced in 2020 and reached
its lowest level. For example, in the 6th district of Paris, the number
reduced from 17% in 2015 to 9.4% in Q3 2020 (&lt;a href=&quot;https://www.notaires.fr/fr/immobilier-fiscalit%C3%A9/prix-et-tendances-de-limmobilier/analyse-du-march%C3%A9-immobilier&quot;&gt;article link&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from here?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To learn more about Kibana, visit Elastic’s official website
&lt;a href=&quot;https://www.elastic.co/kibana/&quot;&gt;https://www.elastic.co/kibana/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To learn more about Elasticsearch, visit Elastic’s official website
&lt;a href=&quot;https://www.elastic.co/elasticsearch/&quot;&gt;https://www.elastic.co/elasticsearch/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To learn more about how to use Elasticsearch for DVF, you can visit my
previous articles of this series &lt;a href=&quot;/series/dvf&quot;&gt;“DVF”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To see the source code about this DVF project, you can visit my GitHub
repository &lt;a href=&quot;https://github.com/mincong-h/learning-elasticsearch&quot;&gt;mincong-h/learning-elasticsearch&lt;/a&gt;,
the source code is under the directory “demo-dvf”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we analyzed the real estate market of Île-de-France in 2020. We
started from the global landscape and ended with a more focused analysis on the
market of second-hand apartments. We
saw the market was active in 2020 despite the pandemic. The period of March to May 2020
was difficult because of the lockdown. We saw that the number of
sales-under-completion reduced significantly in 2020 compared to last years (1%
vs 7%). As for apartments, les Hauts-de-Seine (92) was impacted by the pandemic
as the median price dropped at the end of 2020. On the other hand, the
situation is more optimistic for Paris (75): the median price of second-hand
apartments in Paris (75) increased 35.0% in 5 years and the growth continued
(7.0%) in 2020. We also saw that the 400K€ is maybe enough for the greater Paris area,
but not for Paris (75).
Interested to know more? Please subscribe to &lt;a href=&quot;/feed.xml&quot;&gt;the feed of my blog&lt;/a&gt;, follow me
on &lt;a href=&quot;https://twitter.com/mincong_h&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;https://github.com/mincong-h/&quot;&gt;GitHub&lt;/a&gt;. This will really motivate me to
write more. Hope you enjoy this article, see you the next time!&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;What to do the next time?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I did this analysis for fun during my holidays and I spent 3 days on it. The
main issues were that the data preparation was very long and this is the first
time I used Kibana. Because of my limited number of day-offs, I don’t have more
time spent on it. If I can do that again in the future, here are some ideas of improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Going further in the one department, e.g. Paris (75) because real estate is
highly related to geography, it does not have much added value if we only stay in
a high-level overview.&lt;/li&gt;
  &lt;li&gt;Perform a prediction-related widget to forecast the trend of a given metric.&lt;/li&gt;
  &lt;li&gt;Create a widget using a time-based comparison (e.g. comparing the same period
last year)&lt;/li&gt;
  &lt;li&gt;Annotate some widgets to better fit the analysis.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;… and you, do you have suggestions for improvements or what do you want to know more
about? Please let me know by leaving a comment 🙏&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Grégoire David, “France GeoJSON”, &lt;em&gt;github.com&lt;/em&gt;, 2018.
 &lt;a href=&quot;https://github.com/gregoiredavid/france-geojson&quot;&gt;https://github.com/gregoiredavid/france-geojson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Notaires de France, “Marché immobilier : tendance et évolution des prix de
l’immobilier”, &lt;em&gt;notaires.fr&lt;/em&gt;, 2021. &lt;a href=&quot;https://www.notaires.fr/fr/immobilier-fiscalit%C3%A9/prix-et-tendances-de-limmobilier/analyse-du-march%C3%A9-immobilier&quot;&gt;https://www.notaires.fr/fr/immobilier-fiscalit%C3%A9/prix-et-tendances-de-limmobilier/analyse-du-march%C3%A9-immobilier&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PwC, “Emerging Trends in Real Estate - United States and Canada 2019”, &lt;em&gt;PwC&lt;/em&gt;, 2019.
&lt;a href=&quot;https://www.pwc.com/jg/en/publications/etre_us_2019_report.pdf&quot;&gt;https://www.pwc.com/jg/en/publications/etre_us_2019_report.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jingwen Zheng, “Second-hand apartments transactions in Île-de-France (01/2014 - 06/2020)”,
&lt;em&gt;jingwen-z.github.io&lt;/em&gt;, 2021.
&lt;a href=&quot;https://jingwen-z.github.io/second-hand-apartments-transactions-in-idf-1420/&quot;&gt;https://jingwen-z.github.io/second-hand-apartments-transactions-in-idf-1420/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="elasticsearch" /><category term="elasticsearch" /><category term="kibana" /><category term="open-data" /><summary type="html">This article studies the real estate market of Île-de-France in 2020 by exploring and visualizing the dataset DVF using Kibana. We will discuss the global landscape, the impact of COVID-19, the situation in different departments, and more.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-alexander-kagan-t9Td0zfDTwI-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-alexander-kagan-t9Td0zfDTwI-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">DVF: Aggregations</title><link href="https://mincong.io/2021/04/12/dvf-aggregations/" rel="alternate" type="text/html" title="DVF: Aggregations" /><published>2021-04-12T01:34:30+02:00</published><updated>2021-04-12T01:34:30+02:00</updated><id>https://mincong.io/2021/04/12/dvf-aggregations</id><content type="html" xml:base="https://mincong.io/2021/04/12/dvf-aggregations/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Open data “Demande de valeurs foncières (DVF)” is an open dataset provided by
the French government which collects all the real-estate transactions since
January 2014, in mainland France and the overseas departments and territories.
In the previous DVF articles, we talked about the write path: how to index new
documents, how to optimize storage, and how to perform snapshots and restores.
Starting from this article, we are going to focus on the read path: how to
perform different search actions on this dataset.&lt;/p&gt;

&lt;p&gt;This article will focus on aggregations. Aggregations are important for your
application because it provides an overview to your users without showing any
documents in detail. It also provides information about the selection range, such
as the min/max value of a given field. This topic is also part of the &lt;a href=&quot;https://www.elastic.co/training/elastic-certified-engineer-exam&quot;&gt;Elastic
Certified Engineer
Exam&lt;/a&gt;. After
reading this article, you will understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to write and execute metric aggregation?&lt;/li&gt;
  &lt;li&gt;How to write and execute bucket aggregation?&lt;/li&gt;
  &lt;li&gt;How to write and execute aggregations that contain sub-aggregations?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To better demonstrate the importance of aggregations in real-world scenarios, I am going to use
different examples from the DVF dataset.
This article is written in Elasticsearch 7.12 and Java 11, but most of the
concepts should be appliable to any Elasticsearch 7.x cluster. Most of the
examples are written in two formats: HTTP requests with JSON content and Java. The goal is
to let you better understand how it works even if you are not familiar with
Java.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;

&lt;p&gt;Before writing any aggregation, we need to index the dataset into Elasticsearch.
This has been done in the previous articles so I am not going to go into detail
about it in this article. If you were interested in how to do it, you can
find the previous articles under the category “Elasticsearch” of my blog, they
are prefixed by “DVF”. Once the index is ready, you can find it in the
Elasticsearch cluster via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_cat&lt;/code&gt; indices API as “transactions”:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl localhost:9200/_cat/indices
yellow open transactions xMLeTfvwTYW1mdz5P85JsA 1 1 827105 0 207.3mb 207.3mb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;metric-aggregation&quot;&gt;Metric Aggregation&lt;/h2&gt;

&lt;p&gt;According to Elasticsearch documentation &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations-metrics.html&quot;&gt;Metrics Aggregation
(7.x)&lt;/a&gt;,
the aggregations in this family compute metrics based on values extracted in one
way or another from the documents that are being aggregated. The values are
typically extracted from the fields of the document (using the field data), but
can also be generated using scripts.&lt;/p&gt;

&lt;p&gt;Here I am going to take a simple one: the metric &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations-metrics-valuecount-aggregation.html&quot;&gt;value
count&lt;/a&gt;. As the name indicated,
metric &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value_count&lt;/code&gt; shows how many documents are extracted from the aggregated
documents. To do that via REST API, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_search&lt;/code&gt; endpoint as
follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /transactions/_search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;match_all&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mutation_id/value_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mutation_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we take a quick look into the HTTP request, you will see that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_all&lt;/code&gt; query, which matches all the documents of the index
“transactions” without filtering.&lt;/li&gt;
  &lt;li&gt;The number of search hits to return is set to 0. The default value is 10.
Since we don’t care about those documents, setting it to 0 simplifies the
HTTP response.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We use one single-value metric aggregation and name it as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutation_id/value_count&lt;/code&gt;. I name it using the naming convention:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;${field_name}/${metric_type}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;so that I can understand the target field name to be aggregated and the type
of metric. But this is just a personal preference. You are free to choose the name you
want.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The type of metric is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value_count&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The metric applies to field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutation_id&lt;/code&gt;. I use this field because it is the
key of the mutation (transaction), so it is always non-null.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sending the request above will return:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_shards&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;successful&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;skipped&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gte&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max_score&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggregations&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mutation_id/count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;827105&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It means that there were 827105 transactions in 2020 according to
the dataset. It matches the number of lines in the CSV file.
There is a difference of 1 line because the CSV file includes the header.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  dvf git:(master u=) wc -l downloads/full.2020.csv
  827106 downloads/full.2020.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s see how to do the same thing in Java:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SearchSourceBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aggregation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AggregationBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mutation_id/value_count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mutation_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matchAllQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SearchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ValueCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAggregations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mutation_id/value_count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is almost the same thing as the HTTP request. Here we:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an HTTP request with a search source. The hit size is set to 0 to avoid
returning hits.&lt;/li&gt;
  &lt;li&gt;The aggregation used is the value count (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value_count&lt;/code&gt;), named as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutation_id/value_count&lt;/code&gt;,
targeting field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutation_id&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On the query side, it matches all documents without filtering.&lt;/li&gt;
  &lt;li&gt;Combining the index name and the search source, we create a search request.&lt;/li&gt;
  &lt;li&gt;We use the Java REST High Level Client to send the search request and get the
search response.&lt;/li&gt;
  &lt;li&gt;We can retrieve the aggregation from the response using the name of the
aggregation, i.e. using “mutation_id/value_count”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this section, we discussed how metric aggregation works: we need to provide
the index names to be searched, the query to filter the document, and the
metrics aggregations to be performed. Now, let’s go to the next part: bucket
aggregations.&lt;/p&gt;

&lt;h2 id=&quot;bucket-aggregation&quot;&gt;Bucket Aggregation&lt;/h2&gt;

&lt;p&gt;Bucket aggregations that group documents into buckets, also called bins, based
on field values, ranges, or other criteria. In this section, we are going to use
postal code as an example: let’s see which postal code in France contains the
highest number of transactions?&lt;/p&gt;

&lt;p&gt;To answer this question, we need to prepare an HTTP request for bucket
aggregation:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;match_all&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;postal_code/terms&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;postal_code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we take a quick look into the HTTP request, you will see the same concept as
above for the metric aggregation. This time, the bucket aggregation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;term&lt;/code&gt; does
the following things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It queries all the documents in the target index.&lt;/li&gt;
  &lt;li&gt;It sets the size to 0 to avoid returning documents (hits) because we don’t need them.&lt;/li&gt;
  &lt;li&gt;This is the key of the request. It specifies the type of aggregation to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terms&lt;/code&gt; on field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postal_code&lt;/code&gt;. Therefore, we can obtain a result grouped by
postal code.&lt;/li&gt;
  &lt;li&gt;It only takes the top 3 results. More precisely, there are two notions: size
and order. Here we specified the size, which means the aggregation will return 3
results. As for the order, terms aggregation returns results in descending
order by default. So the terms having the most occurrences will be returned (defaults to 10).
Therefore, combined together (size and order), this setting returns the top 3 results.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sending the request above will return:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_shards&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;successful&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;skipped&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gte&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max_score&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggregations&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;postal_code/terms&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;doc_count_error_upper_bound&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sum_other_doc_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;812333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;doc_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9392&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;51100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;doc_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2859&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;75016&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;doc_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2521&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the top 1 result is… missing value. Oh my god 😅 But this is the forever
pain for data scientists or whoever doing data analytics, isn’t it? If
we filter out that result, then the top 1 goes to Reims (51100) and the top 2
goes to Paris 16e district (75016).&lt;/p&gt;

&lt;p&gt;And here is the implementation in Java. I am not going to explain this code
block because it’s pretty straightforward:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SearchSourceBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aggregation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AggregationBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postal_code/terms&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postal_code&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matchAllQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SearchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ParsedStringTerms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAggregations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postal_code/terms&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countPerPostalCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBuckets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ParsedBucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;ParsedBucket:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getKeyAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;ParsedBucket:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDocCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this section, we saw how to create a bucket aggregation using terms
aggregations and field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postal_code&lt;/code&gt;. But all we saw are very primitive examples and they
didn’t provide much added value for data analytics. In the following sections, I
want to share something more interesting with you, such as: &lt;mark&gt;what is the average
price of a second-hand apartment in Paris?&lt;/mark&gt; Before answering this question, we will
need to compute the price per square meter (€/m2). I will show you how to do
that in the next section. And then, we will do the analysis for Paris.&lt;/p&gt;

&lt;h2 id=&quot;scripted-metric-aggregation&quot;&gt;Scripted Metric Aggregation&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;How to compute the price per square meter (€/m2)?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our current goal is to compute the price per square meter for each apartment sold.
We can do that by doing simple math:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;price_m2 = total_price / built-up area
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are mainly 3 choices to compute this field:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do it at index-time: when we create the new document in Elasticsearch, we can
compute a field in our value class in Java. This is useful when we know
exactly what we need in advance.&lt;/li&gt;
  &lt;li&gt;Do it at runtime: update the index mapping to include a new scripted field.
This will apply to all the documents. This is useful when we don’t know what
additional fields we need when indexing documents. It provides flexibility to modify documents
at runtime. Especially useful for end-users.&lt;/li&gt;
  &lt;li&gt;Do it at query-time: create the field when running the query. This is probably
the most expensive one but it fits the on-demand requirement. Sometimes we
don’t want to keep one additional field forever because it’s only useful for
some queries.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For now, I am going to use choice 3 because it fits the current article
which is about search. To prepare the scripted metric aggregation, we need to
provide a runtime mapping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price_m2&lt;/code&gt;, which is computed by two existing fields:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property_value&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;real_built_un_area&lt;/code&gt;. It looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /transactions/_search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;runtime_mappings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;emit(doc['property_value'].value / doc['real_built_up_area'].value)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script is written in “Painless Script”. Be careful about the logic that you
are going to add to this script because it is easy to change from painless to
painful 🙂. If you want to know more about Painless, visit Elasticsearch
documentation: &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-lang-spec.html&quot;&gt;Painless Language
Specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, going back to our scripted metric, we will need to handle some corner cases
because the property value or real built-up area may be missing or equal to 0. I
filtered them out in the “query” section of the aggregation. Also, we need to
filter the nature of the transaction (mutation) to select only the sales. Other
types like expropriation, exchange, judgement are not what we want. To simplify a
bit, I also excluded the category “sales under construction”. The final HTTP
request looks like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mutation_nature&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Vente&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;local_type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Appartement&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;property_value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;real_built_up_area&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;runtime_mappings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;emit(doc['property_value'].value / doc['real_built_up_area'].value)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2/stats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we take a quick look into the HTTP request, you will see the same concept
again, as above for the metric aggregation and bucket aggregation. This time,
the metric aggregation term does the following things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It does not query all the documents anymore. It contains multiple filters,
encapsulated in a boolean query.&lt;/li&gt;
  &lt;li&gt;It defines a runtime mapping for field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price_m2&lt;/code&gt;, computed from property
value and real built-up area.&lt;/li&gt;
  &lt;li&gt;It sets the size to 0 to avoid returning documents (hits) because we don’t need them.&lt;/li&gt;
  &lt;li&gt;This is the key of the request. It specifies the type of aggregation. We use
multi-valued metric aggregation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stats&lt;/code&gt;, which returns the min, max, average,
sum, and count of the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;price_m2&lt;/code&gt; in the selected documents.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sending the request above will return:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_shards&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;successful&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;skipped&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gte&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max_score&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggregations&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2/stats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;147763&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.003750000149011612&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8166666.666666667&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;26941.800127837614&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3981001212.2896695&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;transactions-in-paris&quot;&gt;Transactions In Paris&lt;/h2&gt;

&lt;p&gt;Now we have all the elements that we need, it’s time to do something fun! We
know how to execute a multi-valued metric aggregation, e.g. stats. We know how
to execute a bucket aggregation, e.g. per postal code. We know how to compute a
scripted metric for the price per meter square (m2). Now, let’s
use them to do a quick case study for Paris. This section aims to answer two questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is the price for second-hand apartments in Paris per district
(arrondissement)?&lt;/li&gt;
  &lt;li&gt;What is the price for second-hand apartments in Paris per type of apartment (T1,
T2, T3, …)?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To answer the first question, we need to use sub-aggregations with 2 levels. The first
level is a terms aggregation per postal code and the second level is a list of
multi-valued metric aggregations: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;percentiles&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stats&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;percentiles&lt;/code&gt; for
price per square meter and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stats&lt;/code&gt; for the total property value.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;must&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;postal_code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;75*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mutation_nature&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Vente&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;local_type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Appartement&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;property_value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;real_built_up_area&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;runtime_mappings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;emit(doc['property_value'].value / doc['real_built_up_area'].value)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;postal-code-aggregation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;postal_code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2/percentiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;percentiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;property_value/percentiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;property_value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sending the request above will return:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggregations&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;postal-code-aggregation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;doc_count_error_upper_bound&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sum_other_doc_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;75018&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;doc_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1740&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;property_value/stats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1740&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.15000000596046448&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9278000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;685657.4655678796&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1193043990.0881104&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2/percentiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;38.31908831908832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4263.305322128852&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;25.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8581.576948155804&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10221.628370766353&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;75.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12191.63493555511&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;95.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;62619.36339522546&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;99.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;205629.62962962964&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;75017&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;doc_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1411&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;property_value/stats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2/percentiles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we transform the response a bit, we can obtain the following tables.&lt;/p&gt;

&lt;h3 id=&quot;total-price-per-district&quot;&gt;Total Price Per District&lt;/h3&gt;

&lt;p&gt;Here is the total price per district in Paris in percentiles: p5, p25, p50, p75,
p95. You can see that the 8th district (&lt;mark&gt;75008&lt;/mark&gt;) is the most
expensive for most of the percentiles. 50% of the apartments are more expensive
than 1.3M€ 🤯.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Postal Code&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p5 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p25 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p50 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p75 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p95 (€)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75001&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;41,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;404,794&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;691,666&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,740,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7,005,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75002&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;278,350&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;496,075&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;970,392&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18,500,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75003&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;610&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;319,583&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;541,163&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,095,193&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,550,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75004&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16,100&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;350,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;595,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,030,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,171,100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75005&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;86,722&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;303,805&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;500,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;852,500&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,746,600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75006&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;103,500&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;389,867&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;729,260&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,504,999&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,408,400&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75007&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;146,600&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;452,985&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;845,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,854,400&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,000,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;mark&gt;75008&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19,310&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;433,250&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;mark&gt;1,299,950&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,323,542&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;33,100,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75009&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;80,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;301,325&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;551,894&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,148,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,300,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75010&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;106,499&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;295,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;486,668&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;837,383&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,716,667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75011&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;122,505&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;272,264&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;436,082&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;719,349&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,320,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75012&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;124,172&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;290,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;432,585&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;680,481&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,150,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75013&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;148,800&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;280,867&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;424,521&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;609,400&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,378,005&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75014&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;149,250&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;310,500&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;494,981&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;770,160&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,104,743&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75015&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;154,400&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;316,764&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;471,024&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;699,333&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,280,571&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75016&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118,915&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;395,990&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;781,012&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,400,268&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,500,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75017&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;97,013&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;312,448&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;562,425&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,199,034&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,230,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75018&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;87,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;237,636&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;371,317&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;586,359&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,800,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75019&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;117,750&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;262,500&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;353,613&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;540,250&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,018,594&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75020&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;134,060&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;248,990&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;407,585&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;636,100&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,500,000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;price-per-m2-per-district&quot;&gt;Price Per M2 Per District&lt;/h3&gt;

&lt;p&gt;But using the total price of the apartment is not objective for judging whether
the appartment is expensive because they don’t have the same real built-in area
(m2). So we should normalize it. We can normalize it by calculating the price per meter square (€/m2). It
gives another table:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Postal Code&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p5 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p25 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p50 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p75 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p95 (€/m2)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75001&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;729&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,591&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,208&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;26,602&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;231,818&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75002&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,492&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,853&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,505&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15,586&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;391,045&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75003&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,144&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,308&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17,131&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;167,899&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75004&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;343&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,405&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,077&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15,448&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;32,767&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75005&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,616&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,004&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,679&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30,905&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;mark&gt;75006&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,348&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,679&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;mark&gt;15,492&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19,666&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;49,035&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;mark&gt;75007&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7,114&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,857&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;mark&gt;15,236&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20,179&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;130,105&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75008&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;260&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,715&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,301&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;39,951&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;919,444&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75009&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,925&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,208&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,207&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,734&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;342,463&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75010&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,331&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,570&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,174&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,747&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128,161&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75011&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,140&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,787&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,167&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,078&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;198,674&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75012&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,222&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,015&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,264&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,669&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;84,290&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75013&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,010&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,345&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,769&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,386&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;56,522&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75014&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,389&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,378&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,805&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,948&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;318,546&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75015&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,994&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,546&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,762&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,066&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17,901&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75016&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,910&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,504&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,810&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28,489&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75017&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,152&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,967&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,700&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,165&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;181,150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75018&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,263&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,582&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,222&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,192&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;62,619&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75019&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,204&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7,294&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,060&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,579&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30,095&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75020&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,390&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,347&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,664&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,538&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;234,160&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can see that not only the 8th district (75008), but all the districts from
1th to 8th are very expensive. In particular, the median (percentile 50) of 6th
district (&lt;mark&gt;75006&lt;/mark&gt;) and 7th district (&lt;mark&gt;75007&lt;/mark&gt;) are higher
than 15k€/m2.&lt;/p&gt;

&lt;h3 id=&quot;prices-per-lot-type&quot;&gt;Prices Per Lot Type&lt;/h3&gt;

&lt;p&gt;In the previous tables, we use bucket aggregation on postal code. But we can
also analyze from another angle: the lot type (T1, T2, T3, T4, …). T1 means
there is only 1 piece in the apartment, T2 means there are 2 pieces, etc.
This type of analysis is useful because different people have different needs in
their lives. Young people probably want
to save some money and buy a small apartment, but a family probably wants a better
one (T3+) because they need more room for the babies, etc. Using the runtime
mappings (painless script) we saw before, we can compute the lot type as part
of the search aggregation request
and obtain the following tables.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;runtime_mappings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;emit(doc['property_value'].value / doc['real_built_up_area'].value)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lot_type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;if (0 &amp;lt; doc['lots_count'].value &amp;amp;&amp;amp; doc['lots_count'].value &amp;lt; 6) { emit('T' + doc['lots_count'].value) } else { emit('Others') }&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The prices per lot type in Paris in percentiles:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Lot Type&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p5 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p25 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p50 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p75 (€)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p95 (€)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31,264&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;210,041&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;358,500&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;600,600&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,565,087&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;179,993&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;338,870&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;mark&gt;517,788&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;792,894&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,702,597&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;162,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;372,188&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;618,806&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,232,125&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,740,950&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;147,470&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;mark&gt;414,250&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;699,413&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,222,750&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,173,845&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;331,108&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;530,791&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;809,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,275,048&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,220,000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Others&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;262,500&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,880,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,712,857&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,572,222&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;33,100,000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;From the table above, we can see that it will be very hard to find an apartment if
your budget is below &lt;mark&gt;400,000€&lt;/mark&gt;. It means that either you have a wonderful job or
you will have to the house with your partner. Or maybe with some luck you won the
loto 😉. Anyway it’s very expensive.&lt;/p&gt;

&lt;p&gt;We can also normalize the price as we did before. Here is the price per meter square (€/m2) in Paris per lot type in percentiles:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Lot Type&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p5 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p25 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p50 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p75 (€/m2)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;p95 (€/m2)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;840&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,936&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,857&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,118&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31,321&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,235&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,246&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,742&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,545&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19,277&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,763&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,679&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,488&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,572&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23,407&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,047&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,251&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,021&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,586&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;22,644&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;T5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,169&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,498&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,649&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15,878&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;37,168&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Others&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,250&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;63,372&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;147,957&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;300,013&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;916,866&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;From this table, we can see that regardless the number of pieces you want (the
lot type), the price per meter square (m2) does not change much. The lot type is
not an important factor for the price. The district is probably more important
as we saw in the previous sections.&lt;/p&gt;

&lt;p&gt;Alright, we go far enough into the Paris real-estate market. It’s
crazy and it’s not for us right now. Let’s come back to the aggregations
of Elasticsearch and we are reaching the end of this article.&lt;/p&gt;

&lt;h2 id=&quot;recapitulation&quot;&gt;Recapitulation&lt;/h2&gt;

&lt;p&gt;We saw several metric and bucket aggregations in this article, but we didn’t
see all of them. There are so many metrics in Elasticsearch that we cannot
remember everything. For me, the takeover is the syntax of the aggregation API.
Once you remember this, it’s easy to search on the internet and complete the rest:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /{index_name_expression}/_search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{query_type}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;runtime_mappings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{mapping_name}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{aggregation_name}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{aggregation_type}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{field_name}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The API path contains the name of the index to be searched. It can also be multiple
indices separated by comma (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt;) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_all&lt;/code&gt; indices. As for the API request body,
it consists of multiple parts: the query part where you can specify the criteria
of the selection; the size part where you can specify the number of search hits
returned (actual documents found in Elasticsearch); the runtime mappings part
to define one or multiple computed fields at query time; and finally the
aggregations part where you can define your metric or bucket aggregation. You
can also provide sub-aggregations under a given aggregation.&lt;/p&gt;

&lt;p&gt;As for the response:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_shards&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aggregations&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price_m2/stats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;147763&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.003750000149011612&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8166666.666666667&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;26941.800127837614&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3981001212.2896695&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It contains some metadata about the search settings and performance, such as the
execution time, the timeout, the number of shards reached. Then, it contains the
number of hits and the actual documents. And finally the aggregations, each
aggregation is a key-value pair in the JSON response, where the key is the name
of the aggregation we specified and the value is the actual result of the
aggregation. As for the structure of the aggregation result:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For metric aggregation, the actual result is the metric. There is one metric
if this is a single-valued metric; there are multiple metrics if this is a
multi-valued metric.&lt;/li&gt;
  &lt;li&gt;For bucket aggregation, the actual results are shown under entry &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buckets&lt;/code&gt;.
Each bucket contains the key, the number of documents found, and the actual
metric(s) requested.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can also see it from another angle by comparing the syntax of Elasticsearch
Aggregations API to SQL. They are
not exactly equivalent, but I believe this comparison is helpful for
understanding:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Item&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;SQL&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Elasticsearch&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Comment&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Source&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM {source_table}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Index name&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;You can select multiple indices in Elasticsearch but you cannot do that in SQL without JOIN.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Metric&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT my_func(my_field)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Name of the aggregation&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Aggregation&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY my_field&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;field&quot;: {my_field}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Query&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE {clause}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;query&quot;: {clause}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Size&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;size&quot;: {size}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;There are no equivalent. In SQL, you cannot GROUP BY and select all the fields of some documents at the same time.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from here?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To learn more about aggregations for Elasticsearch 7, visit official
documentation &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations.html&quot;&gt;“Aggregations
(7.x)”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To learn more about boolean query for Elasticsearch 7, visit official
documentation &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl-bool-query.html&quot;&gt;“Boolean query (7.x)”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To learn more about dataset “Demandes de valeurs foncières géolocalisées”,
visit the website of the French government
&lt;a href=&quot;https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres-geolocalisees/&quot;&gt;etalab&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To learn how to earn 1M€ and buy an apartment in Paris? Well, I want to know
as well. Please let me know if you have an answer by leaving a comment below. 😬&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested to see the source code, you can also find it on my GitHub
under project
&lt;a href=&quot;https://github.com/mincong-h/learning-elasticsearch/tree/blog-dvf-aggregations/demo-dvf&quot;&gt;mincong-h/learning-elasticsearch&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we saw how to use metric aggregation using an example of
value-count aggregation, how to use bucket aggregation for postal code via
terms aggregation, and how to use
scripted aggregation by computing the metric of price per square meter (m2). We
also saw how to perform an aggregation that contains sub-aggregations (stats and
percentiles) using Paris real-estate market as a demo. Finally, we saw how to
remember the syntax efficiently and how to go further from here.
Interested to know more? You can subscribe to &lt;a href=&quot;/feed.xml&quot;&gt;the feed of my blog&lt;/a&gt;, follow me
on &lt;a href=&quot;https://twitter.com/mincong_h&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;https://github.com/mincong-h/&quot;&gt;GitHub&lt;/a&gt;. Hope you enjoy this article, see you the next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Elasticsearch, “Value count aggregation”, &lt;em&gt;elastic.co&lt;/em&gt;, 2021.
&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations-metrics-valuecount-aggregation.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations-metrics-valuecount-aggregation.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Elasticsearch, “Elastic Certified Engineer Exam”, &lt;em&gt;elastic.co&lt;/em&gt;, 2021.
&lt;a href=&quot;https://www.elastic.co/training/elastic-certified-engineer-exam&quot;&gt;https://www.elastic.co/training/elastic-certified-engineer-exam&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jingwen Zheng, “Second-hand apartments transactions in Paris (01/2014 -
06/2020)”, &lt;em&gt;jingwen.github.io&lt;/em&gt;, 2021. &lt;a href=&quot;https://jingwen-z.github.io/second-hand-apartments-transactions-in-paris-1420/&quot;&gt;https://jingwen-z.github.io/second-hand-apartments-transactions-in-paris-1420/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="elasticsearch" /><category term="elasticsearch" /><category term="java" /><summary type="html">How to write and execute metric and bucket aggregations in Elasticsearch for dataset: Demandes de valeurs foncières (DVF) for data analytics. Also, how to execute aggregations that contain sub-aggregations.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-henrique-ferreira-ZyYsY0ez2D4-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-henrique-ferreira-ZyYsY0ez2D4-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Elasticsearch: Generate Configuration With Python Jinja 2</title><link href="https://mincong.io/2021/04/11/elasticsearch-generate-configuration-with-python-jinja2/" rel="alternate" type="text/html" title="Elasticsearch: Generate Configuration With Python Jinja 2" /><published>2021-04-11T02:31:10+02:00</published><updated>2021-04-11T02:31:10+02:00</updated><id>https://mincong.io/2021/04/11/elasticsearch-generate-configuration-with-python-jinja2</id><content type="html" xml:base="https://mincong.io/2021/04/11/elasticsearch-generate-configuration-with-python-jinja2/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When hosting multiple Elasticsearch clusters in production, you will
probably face a problem about cluster provisioning: how can we generate the
configuration for Elasticsearch in a consistent way? There are many factors to
be taken into account: the cloud providers, the instance types, the network
settings, the products or the customers for which the cluster is running, the
version of Elasticsearch, the architecture of Elasticsearch (hot/warm/cold),
etc. Therefore, it’s important to have a tool that helps you and avoid spending
time doing this manually. It is not only about spending time, it is also
about reducing human errors and being consistent for different settings.&lt;/p&gt;

&lt;p&gt;Choosing a templating engine is a good solution. It allows you to have an
automated solution at a reasonable cost. You can start small and add more
complex logic in the future. In this article, we are going to explore one
popular templating engine in Python: Jinja 2. We will see how easy it is to use
and explore some more advanced use-cases. After reading this article, you will
understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is Jinja?&lt;/li&gt;
  &lt;li&gt;How to use it to generate configuration, such as for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch.yml&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;How to use Python class for more complex logic?&lt;/li&gt;
  &lt;li&gt;Going further into Jinja: understanding its core features&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;How to go further from here?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;what-is-jinja&quot;&gt;What is Jinja?&lt;/h2&gt;

&lt;p&gt;Jinja is a modern and designer-friendly templating language for Python.
Jinja is designed to be flexible, fast, and secure. To use Jinja, you can declare
the following requirement in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Jinja2 == 2.11.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or declare the following requirement in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[packages]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Jinja2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;==2.11.3&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I recommend using a fixed version to avoid potential issues with the
requirements. But you can remove it if you don’t feel that it is necessary.&lt;/p&gt;

&lt;h2 id=&quot;generating-configuration&quot;&gt;Generating Configuration&lt;/h2&gt;

&lt;p&gt;In our case, if we want to generate the configuration for Elasticsearch, such as for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch.yml&lt;/code&gt;, it can be as easy as:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# template: elasticsearch.yml.j2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;cluster.name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cluster_name&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;node.name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node_name&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;network.host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… where we inject two variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster_name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_name&lt;/code&gt; to the template
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch.yml.j2&lt;/code&gt;. But having a template is not enough, we also need the
Python code which injects the variables into the template to render the actual
result. In my demo, I am using the following structure, where the templates are
stored in a separated directory called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  jinja2 git:(jinja2 u=) tree .
.
├── es_config_generator.py
└── templates
    └── elasticsearch.yml.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the generator side, the code is simple as well. It accepts the two
variables: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster_name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_name&lt;/code&gt; as input. Then, it locates the
template directory from relative path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./templates&lt;/code&gt; and creates a Jinja
environment for it. Finally, it locates the template and renders it by
passing all the variables as input parameters:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jinja2&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystemLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;templates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileSystemLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;elasticsearch.yml.j2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to this method, we can generate an Elasticsearch configuration file like
this:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;cluster.name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;es-demo&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;node.name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;es-demo-data-1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;network.host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And starting an Elasticsearch node with this custom configuration will work (you
can see the entry &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster_name&lt;/code&gt; in the HTTP response:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; discovery.type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;single-node &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 9200:9200 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/custom.elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  docker.elastic.co/elasticsearch/elasticsearch:7.12.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET localhost:9200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es-demo-data-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cluster_name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es-demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cluster_uuid&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2qiANXx0SIO4HTG9FD_QPg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7.12.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build_flavor&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build_type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build_hash&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;78722783c38caa25a70982b5b042074cde5d3b3a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build_date&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2021-03-18T06:17:15.410153305Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build_snapshot&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lucene_version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8.8.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;minimum_wire_compatibility_version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6.8.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;minimum_index_compatibility_version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6.0.0-beta1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tagline&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;You Know, for Search&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the sample above, we saw how to handle the logic in a simple way. That is, to
pass all the variables one after another into the template to render the result.
It works well for small projects. But when the project grows and you need to
accept more and more complex logic, you will need a better solution. In this
case, it comes to two choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Using more complex logic in the template: for-loops, if-statements, filters,
etc.&lt;/li&gt;
  &lt;li&gt;Using more complex logic in Python scripts and keep the templating part simple.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I prefer the second choice because I do not like having complex logic in a
template file. It makes things hard to read and hard to test. The structure of
the file can become unclear when the logic grows. On the other side, using
more complex logic in Python scripts is easy to test because we can extract a
function, where the outputs are the template variables. It
splits the processing and the rendering into two parts. In the following
sections, I am going to explain how to use Python class to represent more
complex logic. Then, I will also represent more features about Jinja 2, just in
case you think choice 1 is better or you already have templates like
this and have to deal with them.&lt;/p&gt;

&lt;h2 id=&quot;using-python-class&quot;&gt;Using Python Class&lt;/h2&gt;

&lt;p&gt;One effective way to manage the complexity is to group several variables
together as a class. Or a class nested into another. Therefore, you need to pass
one object (one instance of that class) rather than passing multiple variables
for the template rendering. For example, we can modify the variable from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster_name&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster.name&lt;/code&gt; so that we only need to pass the object
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster&lt;/code&gt;. And the same for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt;. The new template can look like this:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;cluster.name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cluster.name&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;node.name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node.name&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;network.host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the associated data classes in Python:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dataclasses&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClusterConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NodeConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, the generator is changed a bit. You can see that we create the named
tuples &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt; before passing them to the template rendering.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;templates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileSystemLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;elasticsearch.yml.v2.j2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# create data classes before rendering
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClusterConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-data-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here my example is almost useless. But imagine a situation where you need to add
if-statements, compute multiple fields, add validation, etc. It will make more
sense in those situations.&lt;/p&gt;

&lt;p&gt;You may also ask: why do we use data class? Because it implements
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__hash__()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__eq__()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__repr__()&lt;/code&gt;. Also, you don’t need to create the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__()&lt;/code&gt; function anymore. So I believe it is much better than a regular
class. You can see more information in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0557/&quot;&gt;PEP 557 – Data Classes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;basic-features-of-jinja-2&quot;&gt;Basic Features of Jinja 2&lt;/h2&gt;

&lt;p&gt;Here are some basic features of Jinja 2 that are useful for many templates. But
of course, Jinja is much more powerful than that. I will explain that later on.&lt;/p&gt;

&lt;p&gt;If statement:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;if node_name %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;node.name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node_name&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endif %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For loop:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;discovery.seed_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for seed_host in seed_hosts %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seed_host&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endfor %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Comment:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{# Comment goes here #}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Comparison:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operator&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Compares two objects for equality.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Compares two objects for inequality.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true if the left hand side is greater than the right hand side.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true if the left hand side is greater or equal to the right hand side.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true if the left hand side is lower than the right hand side.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true if the left hand side is lower or equal to the right hand side.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Logic:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operator&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Return true if the left and the right operand are true.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Return true if the left or the right operand are true.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;negate a statement.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you want to know more about Jinja 2, I suggest you visit to following
documents:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/templates/&quot;&gt;Jinja - Template Designer Documentation
(v2.11)&lt;/a&gt;. Not only you can
find all the expressions listed above, but much more than that, such as
variables, white space control, template inheritance, HTML escaping, filters.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/api/&quot;&gt;Jinja - API (v2.11)&lt;/a&gt;.
Here you will find different APIs in Python. You will need them to integrate
Jinja into your Python scripts.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;I believe testing is an important part of the generation. It is an effective way
to ensure the correctness of the results. There are two ways to test:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testing the data classes&lt;/li&gt;
  &lt;li&gt;Testing the final rendered result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first way, testing the data class, is useful when the data models are
present in the Python scripts and when you have complex processing logic there:
validation, computed fields, etc. But testing it does not verify the actual
rendering in the templates.&lt;/p&gt;

&lt;p&gt;The second way, testing the final rendered result, is an end-to-end approach. It
is useful for any scenario. It asserts the correctness of the final result, such
as string or file. Going this way at the beginning is good, but may become
harder to maintain when the template rendering becomes more complex.
Here is a simple demo of the assertions:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_render_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es-demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cluster.name: es-demo
node.name: es-demo-data-1
network.host: 0.0.0.0&quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I believe there are no perfect solutions for testing. Ultimately, testing is
to provide safety to your product and avoid unexpected results later on. As far
as you feel safe for the generated configuration, maybe that’s the most
important.&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from here?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To know more about how to configure Elasticsearch, visit official
documentation &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/settings.html&quot;&gt;“Configuring
Elasticsearch”&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To see the initial template of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch.yml&lt;/code&gt;, visit the source code on
GitHub (here the link is for Elastcsearch v7.12.0):
&lt;a href=&quot;https://github.com/elastic/elasticsearch/blob/v7.12.0/distribution/src/config/elasticsearch.yml&quot;&gt;https://github.com/elastic/elasticsearch/blob/v7.12.0/distribution/src/config/elasticsearch.yml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To learn more about templating engine Jinja, visit the official website
&lt;a href=&quot;https://jinja.palletsprojects.com/&quot;&gt;https://jinja.palletsprojects.com/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also see the source code of this article on GitHub under repository
&lt;a href=&quot;https://github.com/mincong-h/learning-python/tree/blog/elasticsearch-jinja2/src/jinja2&quot;&gt;mincong-h/learning-python&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we saw what is templating engine Jinja 2, how to use it to
generate the configuration for Elasticsearch clusters, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch.yml&lt;/code&gt;,
how to use Python data classes to represent more complex logic, the basic
features of Jinja 2, how to test the generation, and finally how to go further
from here.
Interested to know more? You can subscribe to &lt;a href=&quot;/feed.xml&quot;&gt;the feed of my blog&lt;/a&gt;, follow me
on &lt;a href=&quot;https://twitter.com/mincong_h&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;https://github.com/mincong-h/&quot;&gt;GitHub&lt;/a&gt;. Hope you enjoy this article, see you the next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Eric V. Smith, “PEP 557 – Data Classes”, &lt;em&gt;python.org&lt;/em&gt;, 2017.
&lt;a href=&quot;https://www.python.org/dev/peps/pep-0557/&quot;&gt;https://www.python.org/dev/peps/pep-0557/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Miguel Brito, “Everything You Need to Know About Python’s Namedtuples”,
&lt;em&gt;dev.to&lt;/em&gt;, 2020. &lt;a href=&quot;https://dev.to/miguendes/everything-you-need-to-know-about-python-s-namedtuples-1l12&quot;&gt;https://dev.to/miguendes/everything-you-need-to-know-about-python-s-namedtuples-1l12&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;卡拉先生, “Elasticsearch配置yaml中文教程”, &lt;em&gt;kalasearch.cn&lt;/em&gt;, 2020.
&lt;a href=&quot;https://kalasearch.cn/community/tutorials/how-to-configure-yaml-file-for-elastic-search/&quot;&gt;https://kalasearch.cn/community/tutorials/how-to-configure-yaml-file-for-elastic-search/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="elasticsearch" /><category term="python" /><category term="elasticsearch" /><category term="python" /><category term="jinja" /><summary type="html">This article explains how to generate the configuration for Elasticsearch using Python templating engine Jinja 2 by going through a basic use-case. It also explains features about Jinja2, testing, and more.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-heiman-ip-iFk8n8ntVDU-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-heiman-ip-iFk8n8ntVDU-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Disk Watermarks In Elasticsearch</title><link href="https://mincong.io/2021/04/10/disk-watermarks-in-elasticsearch/" rel="alternate" type="text/html" title="Disk Watermarks In Elasticsearch" /><published>2021-04-10T01:00:00+02:00</published><updated>2021-04-10T01:00:00+02:00</updated><id>https://mincong.io/2021/04/10/disk-watermarks-in-elasticsearch</id><content type="html" xml:base="https://mincong.io/2021/04/10/disk-watermarks-in-elasticsearch/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;If you operate one or multiple Easticsearch clusters, you probably already heard about disk watermarks.
There are three disk watermarks in Elasticsearch: low, high, flood-stage. They are cluster-level settings and
are important for shard allocations. Its primary goal is to ensure all the nodes have enough disk space and
avoid disk full problems. In this article, we are going to explore their definition, the
symptom when the watermark is reached, and different solutions (i.e. how to avoid it in the first place or how to
mitigate when it happens).&lt;/p&gt;

&lt;p&gt;After reading this article, you will understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to get and update the watermarks in Elasticsearch?&lt;/li&gt;
  &lt;li&gt;Low disk watermark&lt;/li&gt;
  &lt;li&gt;High disk watermark&lt;/li&gt;
  &lt;li&gt;Flood-stage disk watermark&lt;/li&gt;
  &lt;li&gt;How to avoid disk full problem?&lt;/li&gt;
  &lt;li&gt;How to go further from here?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is written for Elasticsearch 6.x and 7.x. Now, let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Elasticsearch considers the available disk space on a node before deciding whether
to allocate new shards to that node or to actively relocate shards away from that node.&lt;/p&gt;

&lt;p&gt;Below are the settings that can be configured in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch.yml&lt;/code&gt; config file or updated
dynamically on a live cluster with the cluster-update-settings API:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Setting&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster.routing.allocation.disk.watermark.low&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The low watermark for disk usage, defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;85%&lt;/code&gt;. Elasticsearch will not allocate shards to nodes that have more than 85% disk used.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster.routing.allocation.disk.watermark.high&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The high watermark for disk usage, defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;90%&lt;/code&gt;. Elasticsearch will attempt to relocate shards away from a node whose disk usage is above 90%.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster.routing.allocation.disk.watermark.flood_stage&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The flood-stage watermark for disk usage, defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;95%&lt;/code&gt;. Elasticsearch enforces a read-only index block (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.blocks.read_only_allow_delete&lt;/code&gt;) on every index that has one or more shards allocated on the node, and that has at least one disk exceeding the flood stage.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To retrieve the current value of different disk watermarks, you can send a GET request to the Cluster Settings API:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_cluster/settings?include_defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may want to add query parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat_settings&lt;/code&gt; so that you can filter the disk watermarks easily:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_cluster/settings?include_defaults&amp;amp;flat_settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To update one or more settings of disk watermarks, specify them in the Cluster Update Settings API:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /_cluster/settings

{
  &quot;transient&quot;: { 
    &quot;cluster.routing.allocation.disk.watermark.low&quot;: &quot;85%&quot;,
    &quot;cluster.routing.allocation.disk.watermark.high&quot;: &quot;90%&quot;,
    &quot;cluster.routing.allocation.disk.watermark.flood_stage&quot;: &quot;95%&quot;,
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we understand the basics of these settings and how to get and update them. Let’s go further
into each of them to better understand their meaning.&lt;/p&gt;

&lt;h2 id=&quot;low-disk-watermark&quot;&gt;Low Disk Watermark&lt;/h2&gt;

&lt;p&gt;When a data node is getting more and more filled, its disk
usage will first across the low disk watermark. The default value is 85%, meaning that Elasticsearch will not allocate shards to nodes that have more than 85% disk used. It can also be set to an absolute byte value (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500mb&lt;/code&gt;) to prevent Elasticsearch from allocating shards if less than the specified amount of space is available. This setting does not affect the primary shards of newly-created indices but will prevent their replicas from being allocated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210410-Elasticsearch-Disk-Warkermarks-Diagram.low-watermark.png&quot; alt=&quot;Diagram for low disk watermark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More precisely, you may see the following shard allocation decisions made by the Disk Threshold Decider:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Decision&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Message&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “the node is above the low watermark cluster setting [cluster.routing.allocation.disk.watermark.low=%s], having less than the minimum required [%s] free space, actual free: [%s]”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “the node is above the low watermark cluster setting [cluster.routing.allocation.disk.watermark.low=%s], using more disk space than the maximum allowed [%s%%], actual free: [%s%%]”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;YES&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard can be allocated because: “the node is above the low watermark, but less than the high watermark, and this primary shard has never been allocated before”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Since Elasticsearch cluster will stop allocating shards to this data node, it means that your cluster may become yellow.&lt;/p&gt;

&lt;p&gt;There are multiple solutions to solve this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add more data nodes to the cluster.&lt;/li&gt;
  &lt;li&gt;Cleanup space by snapshotting old indices, restore them to another cluster if needed, and finally delete them from the current cluster.&lt;/li&gt;
  &lt;li&gt;Add more disk on the node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have an auto-scaling mechanism, it means that that auto-scaler is not working properly.&lt;/p&gt;

&lt;h2 id=&quot;high-disk-watermark&quot;&gt;High Disk Watermark&lt;/h2&gt;

&lt;p&gt;When a data node is getting more and more filled and after reaching the low watermark, its disk
usage will across the high disk watermark. The default value is 90%, meaning that Elasticsearch will attempt to relocate shards away from a node whose disk usage is above 90%. It can also be set to an absolute byte value (similarly to the low watermark) to relocate shards away from a node if it has less than the specified amount of free space. This setting affects the allocation of all shards, whether previously allocated or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210410-Elasticsearch-Disk-Warkermarks-Diagram.high-watermark.png&quot; alt=&quot;Diagram for high disk watermark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More precisely, you may see the following shard allocation decisions made by the Disk Threshold Decider:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Decision&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Message&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “the node is above the high watermark cluster setting [cluster.routing.allocation.disk.watermark.high=%s], having less than the minimum required [%s] free space, actual free: [%s]”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “the node is above the high watermark cluster setting [cluster.routing.allocation.disk.watermark.high=%s], using more disk space than the maximum allowed [%s%%], actual free: [%s%%]”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “allocating the shard to this node will bring the node above the high watermark cluster setting [cluster.routing.allocation.disk.watermark.high=%s] and cause it to have less than the minimum required [%s] of free space (free: [%s], estimated shard size: [%s])”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “allocating the shard to this node will bring the node above the high watermark cluster setting [cluster.routing.allocation.disk.watermark.high=%s] and cause it to use more disk space than the maximum allowed [%s%%] (free space after shard added: [%s%%])”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “the shard cannot remain on this node because it is above the high watermark cluster setting [cluster.routing.allocation.disk.watermark.high=%s] and there is less than the required [%s] free space on node, actual free: [%s]”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shard cannot be allocated because: “the shard cannot remain on this node because it is above the high watermark cluster setting [cluster.routing.allocation.disk.watermark.high=%s] and there is less than the required [%s%%] free disk on node, actual free: [%s%%]”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When a data node reached the high watermark, it is usually not alone. The entire cluster can be full. You
have to deal with this seriously. In addition to the disk being full, Elasticsearch cluster may create a lot
of relocations to relocate shards from one node to another — but it’s useless because all the nodes are getting
full.&lt;/p&gt;

&lt;p&gt;The solutions for solving this issue are the same as the solutions for the low disk watermark.&lt;/p&gt;

&lt;h2 id=&quot;flood-stage-disk-watermark&quot;&gt;Flood-Stage Disk Watermark&lt;/h2&gt;

&lt;p&gt;The next level is the flood stage. The default value is 95%. Elasticsearch enforces a read-only index block (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.blocks.read_only_allow_delete&lt;/code&gt;) on every index that has one or more shards allocated on the node, and that has at least one disk exceeding the flood stage. This setting is the last resort to prevent nodes from running out of disk space. Depending on your Elasticsearch version, the release mechanism is different:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Before Elasticsearch 7, the index block must be released &lt;mark&gt;manually&lt;/mark&gt; when the disk utilization falls below the high watermark.&lt;/li&gt;
  &lt;li&gt;Since Elasticsearch 7, the index block is &lt;mark&gt;automatically&lt;/mark&gt; released when the disk utilization falls below the high watermark.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210410-Elasticsearch-Disk-Warkermarks-Diagram.flood-stage-watermark.png&quot; alt=&quot;Diagram for flood-stage disk watermark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Elasticsearch 6, since the index block must be released manually, you can reset the index, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;twitter&lt;/code&gt;, using the following API:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /twitter/_settings

{
  &quot;index.blocks.read_only_allow_delete&quot;: null
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-to-avoid-disk-full-problem&quot;&gt;How to avoid disk full problem?&lt;/h2&gt;

&lt;p&gt;Nobody wants to put their production at risk or work on this critical issue at 3:00 AM. This problem
can be mitigated in several ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Implement a disk-based auto-scaling mechanism so that new data nodes can be added automatically.&lt;/li&gt;
  &lt;li&gt;Create a warning alert for high disk usage, e.g. 50% full. Therefore, developers or operations teams can handle this during business hours.&lt;/li&gt;
  &lt;li&gt;Create a critical alert for high disk usage, e.g. 70% full. Therefore, the on-call team can handle this anytime when the situation becomes critical. However, the recovery may take a long time but monitoring this can be tiring as well. You may want to add another disk full alert, e.g. 85% full, to ensure that the situation is not worsened during recovery time.&lt;/li&gt;
  &lt;li&gt;Use Elasticsearch Index Lifecycle Management (ILM) to regularly clean up old indices. Or implement a custom index lifecycle management mechanism to adapt your business requirements.&lt;/li&gt;
  &lt;li&gt;Use Elasticsearch Snapshot and Restore module so that you can move data easily across clusters.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from here?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To better understand low disk watermark, visit Opster’s page &lt;a href=&quot;https://opster.com/elasticsearch-glossary/elasticsearch-low-disk-watermark/&quot;&gt;“Elasticsearch Low Disk Watermark”&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To better understand high disk watermark, visit Opster’s page &lt;a href=&quot;https://opster.com/elasticsearch-glossary/elasticsearch-high-disk-watermark/&quot;&gt;“Elasticsearch High Disk Watermark”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To see how the decisions are made based on different thresholds, see the source code of &lt;a href=&quot;https://github.com/elastic/elasticsearch/blob/v7.12.0/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiskThresholdDecider&lt;/code&gt; (v7.12.0)&lt;/a&gt; on GitHub.&lt;/li&gt;
  &lt;li&gt;For more information about disk-based shard allocation on Elasticsearch 6, visit official documentation:
&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.8/disk-allocator.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.8/disk-allocator.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For more information about disk-based shard allocation on Elasticsearch 7, visit official documentation:
&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.12/modules-cluster.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.12/modules-cluster.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To see more shard allocation decisions, visit another article on my blog: &lt;a href=&quot;/2020/09/27/shard-allocation/&quot;&gt;“18 Allocation Deciders in Elasticsearch”&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we saw how different disk watermarks in Elasticsearch: low (85%), high (90%), and
flood-stage (95%). All of them are dynamic settings and can be updated without restarting the server.
Elasticsearch will not allocate shards to nodes that have more than 85% disk used.
Elasticsearch will attempt to relocate shards away from a node whose disk usage is above 90%.
A read-only index block will be enforced when the flood stage exceeds.
We also see different solutions to avoid disk full problems.
Interested to know more? You can subscribe to &lt;a href=&quot;/feed.xml&quot;&gt;the feed of my blog&lt;/a&gt;, follow me
on &lt;a href=&quot;https://twitter.com/mincong_h&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;https://github.com/mincong-h/&quot;&gt;GitHub&lt;/a&gt;. Hope you enjoy this article, see you the next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Elastic, “Cluster Get Settings API (7.x)”, &lt;em&gt;elastic.co&lt;/em&gt;, 2021.
&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/cluster-get-settings.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.x/cluster-get-settings.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Elastic, “Cluster-level shard allocation and routing settings”, &lt;em&gt;elastic.co&lt;/em&gt;, 2021.
&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.12/modules-cluster.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.12/modules-cluster.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="elasticsearch" /><category term="elasticsearch" /><summary type="html">Understanding different disk watermarks: low, high, and flood-stage in Elasticsearch. The symptom when the cluster reaches these values and how to mitigate or avoid the issues. Also, how to better operate your clusters using these watermarks.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-kelly-sikkema-_whs7FPfkwQ-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-kelly-sikkema-_whs7FPfkwQ-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">JUnit 5: Dynamic Tests with TestFactory</title><link href="https://mincong.io/2021/04/09/junit-5-dynamic-tests/" rel="alternate" type="text/html" title="JUnit 5: Dynamic Tests with TestFactory" /><published>2021-04-09T02:54:59+02:00</published><updated>2021-04-09T02:54:59+02:00</updated><id>https://mincong.io/2021/04/09/junit-5-dynamic-tests</id><content type="html" xml:base="https://mincong.io/2021/04/09/junit-5-dynamic-tests/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, I am going to share with you how to write dynamic tests
in JUnit 5 using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;. Dynamic testing is a new programming model
introduced in JUnit 5. It is useful to create tests that cannot be defined at
compile time (e.g. loaded via an external resource) or to create tests
that cannot be expressed easily via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After reading this article, you will understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The basic syntax of dynamic test&lt;/li&gt;
  &lt;li&gt;Different return types for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The lifecycle of dynamic test&lt;/li&gt;
  &lt;li&gt;Checking the result in IDE&lt;/li&gt;
  &lt;li&gt;How to go further from here&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;basic-syntax&quot;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;JUnit 5 User Guide&lt;/a&gt;,
the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Test&lt;/code&gt; annotation in JUnit Jupiter described in Annotations is very
similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Test&lt;/code&gt; annotation in JUnit 4. Both describe methods that implement
test cases. These test cases are static in the sense that they are fully
specified at compile-time, and their behavior cannot be changed by anything
happening at runtime. Assumptions provide a basic form of dynamic behavior but
are intentionally rather limited in their expressiveness.&lt;/p&gt;

&lt;p&gt;In addition to these standard tests, a completely new kind of test programming
model has been introduced in JUnit Jupiter. This new kind of test is a dynamic
test which is generated at runtime by a factory method that is annotated with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The basic syntax of a dynamic test is:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@TestFactory&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dynamicTestStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;dynamicTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; is a multiple of 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we specified several things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The annotation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt; so that JUnit 5 can recognize this method as a
test factory containing multiple dynamic tests.&lt;/li&gt;
  &lt;li&gt;The return type of the method is a stream of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicTest&lt;/code&gt;. Note that you
don’t have to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; and there are other choices. We will talk about
that in the next section.&lt;/li&gt;
  &lt;li&gt;Use static method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.junit.jupiter.api.DynamicTest.dynamicTest&lt;/code&gt; to create a
dynamic test. Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamicTest&lt;/code&gt; consists of two parts: a string for the
display name and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Executable&lt;/code&gt; for the assertions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we have them, we can run the test. There is no additional dependency
required. In the following sections, we are going
to explore a bit more into detail different pieces.&lt;/p&gt;

&lt;h2 id=&quot;return-types-for-test-factory&quot;&gt;Return Types For Test Factory&lt;/h2&gt;

&lt;p&gt;In the section above, we saw that we can return a list of dynamic tests as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&amp;lt;DynamicTest&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dynamicTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But it does not have to be in this way. We can also specify other types for
returning the tests. As far as this type is iterable, JUnit 5 is happy about it.
For example, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&lt;/code&gt;, Iterable&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;, &lt;/code&gt;Iterator&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;, &lt;/code&gt;Stream&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;, or array
of &lt;/code&gt;DynamicTest&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;. Besides that, you can also consider using &lt;/code&gt;DynamicContainer`
which can contain multiple tests inside it. See &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;JUnit 5 - User
Guide&lt;/a&gt; for more
information about that.&lt;/p&gt;

&lt;h2 id=&quot;lifecycle-of-dynamic-tests&quot;&gt;Lifecycle Of Dynamic Tests&lt;/h2&gt;

&lt;p&gt;The execution lifecycle of a dynamic test is different from the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Test&lt;/code&gt;
case. The lifecycle callbacks, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterEach&lt;/code&gt;, are &lt;em&gt;not&lt;/em&gt;
executed for each dynamic test, but the whole &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;. Therefore, we
need to be very careful about using class-level variables because they won’t be
reset properly.&lt;/p&gt;

&lt;p&gt;Stardard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Test&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterEach&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dynamic tests via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Execute dynamic test 1&lt;/li&gt;
      &lt;li&gt;Execute dynamic test 2&lt;/li&gt;
      &lt;li&gt;Execute dynamic test 3&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterEach&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE&lt;/h2&gt;

&lt;p&gt;When running dynamic tests in IntelliJ IDEA (2020.3.1), you can find the results
as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210409-dynamic-test.png&quot; alt=&quot;Dynamic tests in IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where each dynamic test has its result and its display name.&lt;/p&gt;

&lt;h2 id=&quot;should-we-use-dynamic-tests&quot;&gt;Should We Use Dynamic Tests?&lt;/h2&gt;

&lt;p&gt;Actually, I prefer using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt; because it
has the full lifecycle support (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterEach&lt;/code&gt;) while the test
factory doesn’t. Both of them support display names so it’s not a problem.
Usually,
the test cases can be defined at compile-time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So why should we dynamic tests?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I believe there are two reasons: when the tests cannot be expressed at compile-time or when the parameterized tests are not good enough.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Runtime test sources. When the tests cannot be expressed at compiled time,
you may want to load them at runtime. Dynamic tests support this via the
following methods:&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;DynamicTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dynamicTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;DynamicContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dynamicContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Therefore, you can pass the sources via a URI. It can be something in the
classpath, in the filesystem, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because parameterized tests are not good enough. This is my test. I wanted to
use some exceptions as input sources, and assert the exception handling
mechanism by asserting these exceptions one after another. However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt;
seems only support basic Java types: primitives or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;, so passing an
exception as input is not possible. So I ended up using dynamic tests for
this purpose.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are probably other motivations as well. Please let me know what you think
by leaving a comment :)&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from here?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To learn more about JUnit 5 in general, read &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;JUnit 5 - User
Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To learn more about JUnit 5 Parmaterized Tests, I have another blog post that
may interest you &lt;a href=&quot;/2021/01/31/juni5-parameterized-tests/&quot;&gt;Writing Parameterized Tests in JUnit 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also see the source code of this article on GitHub under
&lt;a href=&quot;https://github.com/mincong-h/java-examples/blob/blog/junit5-dynamic-tests/junit5/src/test/java/io/mincong/junit5/dynamic_test/NumberTest.java&quot;&gt;mincong-h/java-examples&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we saw how to write dynamic tests via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;, the
different return types for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestFactory&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;, array, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; of dynamic tests. We also see the lifecycle of
dynamic tests, which do not benefit from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AfterEach&lt;/code&gt;
callbacks for each individual dynamic test, how do the results look like in IDE,
and how to go further from here.
Interested to know more? You can subscribe to &lt;a href=&quot;/feed.xml&quot;&gt;the feed of my blog&lt;/a&gt;, follow me
on &lt;a href=&quot;https://twitter.com/mincong_h&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;https://github.com/mincong-h/&quot;&gt;GitHub&lt;/a&gt;. Hope you enjoy this article, see you the next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;JUnit Team, “JUnit 5 - User Guide”, &lt;em&gt;junit.org&lt;/em&gt;, 2021.
&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;https://junit.org/junit5/docs/current/user-guide/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Baeldung, “Guide to Dynamic Tests in Junit 5”, &lt;em&gt;baeldung.com&lt;/em&gt;, 2021.
&lt;a href=&quot;https://www.baeldung.com/junit5-dynamic-tests&quot;&gt;https://www.baeldung.com/junit5-dynamic-tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Satish Varma, “Junit 5 dynamic tests @TestFactory with examples”,
&lt;em&gt;JavaByDeveloper&lt;/em&gt;, 2020. &lt;a href=&quot;https://javabydeveloper.com/junit-5-dynamic-tests-testfactory-with-examples/&quot;&gt;https://javabydeveloper.com/junit-5-dynamic-tests-testfactory-with-examples/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="java-testing" /><category term="java" /><category term="junit" /><category term="junit5" /><category term="testing" /><summary type="html">How to write dynamic tests using @TestFactory in JUnit 5? This article explains the syntax, different return types, the test lifecycle, and potential use-cases.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-mike-kenneally-tNALoIZhqVM-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-mike-kenneally-tNALoIZhqVM-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Making Backward-Compatible Schema Changes in MongoDB</title><link href="https://mincong.io/2021/02/27/mongodb-schema-compatibility/" rel="alternate" type="text/html" title="Making Backward-Compatible Schema Changes in MongoDB" /><published>2021-02-27T17:07:27+01:00</published><updated>2021-02-27T17:07:27+01:00</updated><id>https://mincong.io/2021/02/27/mongodb-schema-compatibility</id><content type="html" xml:base="https://mincong.io/2021/02/27/mongodb-schema-compatibility/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Changing the schema of a Mongo collection is a common request for developers. We
need this when the business evolves: we need to add new fields or remove
existing fields from a target Mongo collection to better support different
use-cases. Nevertheless, this is a risky operation, it may trigger an incident or
outage when this is not handled correctly. In this article, we are going to what
can go wrong, how to change the schema safely, and how to investigate
if things go wrong. This article assumes that you are familiar with the basic
concepts of MongoDB and uses &lt;a href=&quot;https://github.com/FasterXML/jackson-databind&quot;&gt;Jackson&lt;/a&gt; as the serialization framework for your
Java application.&lt;/p&gt;

&lt;p&gt;After reading this article, you will understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Potential risks when adding a new field&lt;/li&gt;
  &lt;li&gt;Filling missing data with a default value&lt;/li&gt;
  &lt;li&gt;Writing unit tests&lt;/li&gt;
  &lt;li&gt;Migrating existing documents&lt;/li&gt;
  &lt;li&gt;Preparing the worst case: how to revert changes&lt;/li&gt;
  &lt;li&gt;Incident: how to mitigate using Mongo queries?&lt;/li&gt;
  &lt;li&gt;How to go further from here?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is written with MongoDB 4.2, Jackson 2.12, and Java 11. But the
concepts are not tight to these versions and should be valid for older versions.
Now, let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;potential-risks&quot;&gt;Potential Risks&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;What can go wrong when adding a new field?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If a new field is added in the Java class without changing the existing
documents in MongoDB, the deserialization can be completely broken. This is
because the new field required by the Java class does not exist for those
documents. Deserializing them can trigger an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnrecognizedPropertyException&lt;/code&gt; by
Jackson Object Mapper.&lt;/p&gt;

&lt;p&gt;Here is an example called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderV1&lt;/code&gt;. The 1st version of the order contains
3 fields: the object ID in MongoDB, the customer ID, and the amount of this
order. Recently, the product owner wants the possibility to cancel an order, so
we need a new field “isCanceled” to support this use-case as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderV2&lt;/code&gt;. Also,
the product owner wants us to add an operator to keep track of the person who
handles the order. The changes look pretty simple:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-public class OrderV1 {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+public class OrderV2 {
&lt;/span&gt;
   @JsonProperty(&quot;_id&quot;)
   private final String id;

   @JsonProperty(&quot;customerId&quot;)
   private final String customerId;

   @JsonProperty(&quot;amount&quot;)
   private final double amount;

+  @JsonProperty(&quot;isCanceled&quot;)
&lt;span class=&quot;gi&quot;&gt;+  private final boolean isCanceled;
&lt;/span&gt;
+  @JsonProperty(&quot;operator&quot;)
&lt;span class=&quot;gi&quot;&gt;+  private final String operator;
&lt;/span&gt;
   ...
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But you will see that there are some major risks here.&lt;/p&gt;

&lt;h3 id=&quot;nullpointerexception&quot;&gt;NullPointerException&lt;/h3&gt;

&lt;p&gt;Without changing existing documents in MongoDB, the deserialization of the new fields may
be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. This is the case for the new field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator&lt;/code&gt;. This is because
the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator&lt;/code&gt; does not exist for those Mongo documents. In Java, having a
field with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;
value can trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; and break your application. You need to
either handle the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; case in your Java code; or perform data migration in
Mongo, i.e. adding the missing fields for your existing documents. We will talk
about these tricks in detail in the following sections.&lt;/p&gt;

&lt;h3 id=&quot;impossible-to-rollback&quot;&gt;Impossible To Rollback&lt;/h3&gt;

&lt;p&gt;Another risk is about reverting the changes. Without additional configuration in
the Jackson object mapper or your value class, you may not be able to roll back
your changes once they are deployed to production. Once the Java changes are reverted,
the deserialization of the new documents from MongoDB to Java will fail with the
following exception:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“java.io.UncheckedIOException:
com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field
“isCanceled” (class io.mincong.mongodb.model_changes.OrderV1), not marked as ignorable (3
known properties: “amount”, “customerId”, “_id”]) at [Source: (String)”{“_id”: “2”,
“customerId”: “Customer2”, “amount”: 200.0, “isCanceled”: true, “operator”:
“emea@example.com”, “productIds”: [“A”, “B”, “C”]}”; line: 1, column: 77] (through reference
chain: io.mincong.mongodb.model_changes.OrderV1[“isCanceled”])”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is because new documents have the field “isCanceled” but the old value
class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderV1&lt;/code&gt; does not know how to deserialize it! This is so dangerous, we
rolled back, but the production is on fire, exceptions are everywhere. But how to avoid this from
happening? We will discuss it in detail in the “Preparing For Rollback” section.&lt;/p&gt;

&lt;p&gt;Now we have a better understanding of how adding new fields may impact our
production, it’s time to see how to improve the situation using different
techniques.&lt;/p&gt;

&lt;h2 id=&quot;filling-missing-data&quot;&gt;Filling Missing Data&lt;/h2&gt;

&lt;p&gt;To prevent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;, we can fill the missing data in Java by
providing a default value. There are 4 ways to do that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Java language feature&lt;/li&gt;
  &lt;li&gt;Fill null in the constructor&lt;/li&gt;
  &lt;li&gt;Fill null in the getter&lt;/li&gt;
  &lt;li&gt;Use Jackson module&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-java-language-feature&quot;&gt;Using Java Language Feature&lt;/h3&gt;

&lt;p&gt;When declaring a class attribute as primitive, Jackson chooses a default value
for you. For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean&lt;/code&gt;, it defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integer&lt;/code&gt;, it defaults to 0;
for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt;, it defaults to 0.0; …
Therefore, you can rely on this technique to avoid having a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; field in your
Java application. For example, to express whether an order is canceled, we
can use the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt; which is a primitive type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean&lt;/code&gt;. When the field
does not exist in Mongo document, it defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, which means the order
is valid, not canceled.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderV2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
   * This is a new boolean field.
   *
   * &amp;lt;p&amp;gt;For existing documents which do not contain this field, the
   * deserialization defaults to `false`.
   */&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isCanceled&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isCanceled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, be careful when choosing the adjective used for the new information. You
should ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; has the correct meaning for documents missing that
field. For example, if you are adding a field to represent the visibility of
an object, you have two choices: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isHidden&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isVisible&lt;/code&gt;, which one should
you use? You should probably choose the adjective
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isHidden&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isVisible&lt;/code&gt; because, for existing Mongo
documents, they don’t have the field for visibility. In this case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isHidden&lt;/code&gt; defaults to false (visible) when the field does not exist&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isVisible&lt;/code&gt; defaults to false (hidden) when the field does not exist. This is
NOT what we need: we want to default to visible, not hidden.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isHidden&lt;/code&gt; is a better choice here.&lt;/p&gt;

&lt;h3 id=&quot;filling-null-in-constructor&quot;&gt;Filling Null In Constructor&lt;/h3&gt;

&lt;p&gt;Another way is to handle to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; in the constructor of the value class.
Therefore, when the deserialization happens, Jackson uses the constructor as the
JSON creator to create the Java instance, and the null case will be handled
properly.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderV2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JsonCreator&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OrderV2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customerId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isCanceled&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;productIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;support@example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a real example. Given a document in Mongo collection without the new
field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;customerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Customer1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then during the deserialization, this is considered as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; by Jackson, but
then fall back to “support@example.com” in the constructor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210227-handle-null-in-constructor.png&quot; alt=&quot;Handle null in constructor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; case is handled successfully.&lt;/p&gt;

&lt;h3 id=&quot;filling-null-in-getter&quot;&gt;Filling Null In Getter&lt;/h3&gt;

&lt;p&gt;In a similar approach, you can also handle null in the getter method.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderV2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JsonProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;operator&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;support@example.com&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jackson-jdk8module&quot;&gt;Jackson Jdk8Module&lt;/h3&gt;

&lt;p&gt;Another solution is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional&lt;/code&gt;, combined with Jackson module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jdk8Module&lt;/code&gt; to
serialize and deserialize it correctly. You can visit GitHub project
&lt;a href=&quot;https://github.com/FasterXML/jackson-modules-java8&quot;&gt;https://github.com/FasterXML/jackson-modules-java8&lt;/a&gt; or read the article &lt;a href=&quot;https://www.baeldung.com/jackson-optional&quot;&gt;“Using
Optional with Jackson”&lt;/a&gt; in Baeldung
to learn more about it.&lt;/p&gt;

&lt;h2 id=&quot;writing-unit-tests&quot;&gt;Writing Unit Tests&lt;/h2&gt;

&lt;p&gt;To better simulate the changes, you can write some unit tests to test different
behavior. I am not recommending you to write tests to cover all the cases, that
will be very time-consuming. I am just trying to share different testing
techniques to demonstrate that it is possible to assert in some way.&lt;/p&gt;

&lt;h3 id=&quot;testing-reciprocity&quot;&gt;Testing Reciprocity&lt;/h3&gt;

&lt;p&gt;One possible test is to ensure that you can serialize a document into MongoDB,
deserialize it back in Java, and the restored Java instance is equal to the
original one.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Java             MongoDB
---              ---
orignal   -----&amp;gt; Mongo document
restored &amp;lt;-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Something like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Given&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insertOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// When&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customerId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BigCorp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Then&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsExactly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing-backward-compatibility&quot;&gt;Testing Backward-Compatibility&lt;/h3&gt;

&lt;p&gt;Another possible test is to test that deserializing an old Mongo document into
Java using the new schema (new Java class) will work as expected.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Java             MongoDB
---              ---
BSON      -----&amp;gt; Mongo document
restored &amp;lt;-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because your Java class is changed (added new fields), you cannot use it to create the same
structure as it was before. To simulate the existing Mongo documents, you can
create a Mongo document using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.bson.Document&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ \&quot;_id\&quot;: \&quot;1\&quot;, \&quot;customerId\&quot;: \&quot;Customer1\&quot;, \&quot;amount\&quot;: 100.0 }&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example, we created a BSON document without the new field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt;
in the test. It simulates the existing Mongo documents created before the schema
change. It allows us to assert the
deserialization and ensure that the restored document contains the values that
we expect.&lt;/p&gt;

&lt;h3 id=&quot;testing-rollback&quot;&gt;Testing Rollback&lt;/h3&gt;

&lt;p&gt;This sounds a bit overkill to me. Testing in staging is probably enough. But
if you want to do this, it’s possible as well.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Java                  MongoDB
---                   ---
original (V2)  -----&amp;gt; Mongo document
restored (V1) &amp;lt;-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can copy the existing Java class into a new class, such as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LegacyOrder.java&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderV1.java&lt;/code&gt;. Then, write an instance V2 into
MongoDB and read it back as V1 (legacy) format to assert if the result is what
you expect.&lt;/p&gt;

&lt;h2 id=&quot;migrating-existing-documents&quot;&gt;Migrating Existing Documents&lt;/h2&gt;

&lt;p&gt;Besides providing a default value during the deserialization, another possibility
to avoid the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; is to migrate the existing documents in
MongoDB. Before doing so, consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Whether you need to perform a backup before running your query. Ideally, the
backup is scheduled regularly. Or consider export the concerned
documents using
&lt;a href=&quot;https://docs.mongodb.com/database-tools/mongoexport/&quot;&gt;mongoexport&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Testing your query in localhost and staging environment before running it in
production.&lt;/li&gt;
  &lt;li&gt;Ask for approval from at least one of your teammates before changing the
documents.&lt;/li&gt;
  &lt;li&gt;Create a conversation in the chat tool, e.g. Slack or Microsoft Teams, to keep
track of the operations.&lt;/li&gt;
  &lt;li&gt;Update one document before updating multiple ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, back to the Mongo query for migration. This can be as simple as:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isCanceled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isCanceled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the query above:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We find the documents in collection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orders&lt;/code&gt; that do not contain the field
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Then for those documents, we set the missing field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt; as “false”.&lt;/li&gt;
  &lt;li&gt;By default, an update statement only updates one single document. We set it to
update multiple ones — all those matching the selection (without field
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt;). Note that it’s better to perform the update query twice: the
first time with option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ multi: false }&lt;/code&gt; to test if the update statement
works. Then perform it a second-time with option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ multi: true }&lt;/code&gt; to update
all the documents that matched the selection. In this way, we reduce the risk of
breaking the entire collection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then the update result shows how many documents were concerned: the number of
documents matched the query, number of documents updated or inserted, and number
of documents modified.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;WriteResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nMatched&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nUpserted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nModified&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;preparing-for-rollback&quot;&gt;Preparing For Rollback&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;How to handle an unknown field in Jackson?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the previous section “Potential Risks”, we mentioned that rolling back to
the previous version in Java application may not be possible.
The deserialization of the new documents in MongoDB may fail with the
following exception:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“java.io.UncheckedIOException:
com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field
“isCanceled” (class io.mincong.mongodb.model_changes.OrderV1), not marked as ignorable (3
known properties: “amount”, “customerId”, “_id”]) at [Source: (String)”{“_id”: “2”,
“customerId”: “Customer2”, “amount”: 200.0, “isCanceled”: true, “operator”:
“emea@example.com”, “productIds”: [“A”, “B”, “C”]}”; line: 1, column: 77] (through reference
chain: io.mincong.mongodb.model_changes.OrderV1[“isCanceled”])”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is because new documents have the field “isCanceled” but the old value
class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderV1&lt;/code&gt; does not know how to deserialize it! In this section, we are
going to see how to handle unknown fields correctly in Jackson.&lt;/p&gt;

&lt;h3 id=&quot;handle-unknown-field-globally&quot;&gt;Handle Unknown Field Globally&lt;/h3&gt;

&lt;p&gt;Make the Jackson object mapper more lenient face to unknown properties during
the JSON deserialization by disabling the feature &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL_ON_UNKNOWN_PROPERTIES&lt;/code&gt;.
We can do that using one of the following lines:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DeserializationFeature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FAIL_ON_UNKNOWN_PROPERTIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DeserializationFeature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FAIL_ON_UNKNOWN_PROPERTIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will apply to all the JSON objects deserialized by this object mapper.&lt;/p&gt;

&lt;h3 id=&quot;handle-unknown-field-locally&quot;&gt;Handle Unknown Field Locally&lt;/h3&gt;

&lt;p&gt;Make the Jackson object mapper more lenient for a given value class during the
JSON deserialization by adding annotation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@JsonIgnoreProperties&lt;/code&gt; in your value
class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@JsonIgnoreProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignoreUnknown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderV1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will apply to all the JSON objects deserialized into this value class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderV1&lt;/code&gt;. Compared to setting the feature globally, setting it locally at the class
level gives you finer control about the behavior over different classes, but
it’s also easier to forget adding this annotation because you will have to do
that for &lt;em&gt;all&lt;/em&gt; the classes and bring inconsistency over the deserialization
behavior.&lt;/p&gt;

&lt;p&gt;Once you configured one of the features mentioned above (globally or locally),
then it should be safe to rollback! Hopefully, you won’t need to rollback, but
it’s always a good idea to know that your code is prepared for that.&lt;/p&gt;

&lt;h2 id=&quot;useful-mongo-queries&quot;&gt;Useful Mongo Queries&lt;/h2&gt;

&lt;p&gt;In the previous sections, we were focused on how to avoid breaking the schema in
the first place. But what if the production is already broken? Maybe someone
else didn’t realize his changes can trigger an incident. Therefore, it’s always
a good thing to learn some basic Mongo queries to prepare the worst case. That
is, fixing the production when it is broken. Here are some Mongo queries that I
prepared for you.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Count the number of documents in the collection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orders&lt;/code&gt;. Useful to understand
how many documents are concerned and the potential impact if things go wrong.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isCanceled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pretty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Customer1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Find out 10 documents without the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt; and print them in pretty
format. Useful to inspect the JSON before or after the actual update.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isCanceled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isCanceled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remove field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt; from all the documents having this field. Useful for
reverting the changes. Especially when your Java code had been rolled back to
the previous version but the Jackson fails to deserialize the recently-added Mongo
documented, which contains the new field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isCanceled&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-scenarios&quot;&gt;Other Scenarios&lt;/h2&gt;

&lt;p&gt;In the sections above, we mainly discussed what happened when adding a new field
in MongoDB. But what about other scenarios?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Another common scenario is to remove a field. Removing a field may have an issue
because the Java class may not be prepared for accepting unknown properties.
This is exactly what we discussed during the section “Preparing For Rollback”.&lt;/li&gt;
  &lt;li&gt;Another possible scenario is to change the type of an existing field. I would
avoid doing this. There must be a better solution, such as creating a new
field using another name.&lt;/li&gt;
  &lt;li&gt;Renaming or removing an element in a Java enum. Renaming is possible but please
ensure that the JSON property naming is not going to be changed implicitly.
For example, by renaming an enum item from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FOO&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BAR&lt;/code&gt;, the serialization will
be changed from “FOO” to “BAR”, which will completely break your application.
Removing an element is dangerous as well. Ensure that
this element does not exist in any of your databases (staging, production)
before doing so.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are eventually other scenarios that I didn’t mention. Please leave a
comment so that everyone reading this article can learn about that.&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from here?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This article assumes that you use &lt;a href=&quot;https://github.com/FasterXML/jackson-databind&quot;&gt;Jackson
Databind&lt;/a&gt; to serialize and
deserialize your Mongo documents in Java. If you are not using it and want to
give it a try, take a look at this Stack Overflow question &lt;a href=&quot;https://stackoverflow.com/a/47949886/4381330&quot;&gt;Is there any way
for creating Mongo codecs
automatically?&lt;/a&gt;, my implementation
is highly inspired by Kevin Day’s answer.&lt;/li&gt;
  &lt;li&gt;To learn more about different update operators in MongoDB, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$set&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$unset&lt;/code&gt;, visit MongoDB Manual &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/update/&quot;&gt;“Update
Operators”&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To learn more about database tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mongodump&lt;/code&gt;, visit MongoDB documentation
&lt;a href=&quot;https://docs.mongodb.com/database-tools/mongodump/#mongodb-binary-bin.mongodump&quot;&gt;mongodump&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also find the source code of this article on GitHub under project
&lt;a href=&quot;https://github.com/mincong-h/java-examples/tree/blog/mongo-schema-compatibility/mongo&quot;&gt;mincong-h/java-examples&lt;/a&gt;,
in particular the &lt;a href=&quot;https://github.com/mincong-h/java-examples/tree/blog/mongo-schema-compatibility/mongo/src/main/java/io/mincong/mongodb/model_changes&quot;&gt;source
code&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/mincong-h/java-examples/tree/blog/mongo-schema-compatibility/mongo/src/test/java/io/mincong/mongodb/model_changes&quot;&gt;test code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we saw the potential risks for MongoDB when adding a new field
in the Java application (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; and issue for rollback), the
different techniques for filling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; value, how to write unit tests, how
to migrate the existing documents, how to prepare for rollback by handling
unknown field correctly via object mapper or via Java class annotation, and some
useful MongoDB queries to help you investigate the incident when something goes
wrong. Finally, we discussed briefly other scenarios and saw some resources
about how to go further from here.
Interested to know more? You can subscribe to &lt;a href=&quot;/feed.xml&quot;&gt;the feed of my blog&lt;/a&gt;, follow me
on &lt;a href=&quot;https://twitter.com/mincong_h&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;https://github.com/mincong-h/&quot;&gt;GitHub&lt;/a&gt;. Hope you enjoy this article, see you the next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MongoDB, “MongoDB Documentation”, 2021.
&lt;a href=&quot;https://docs.mongodb.com/&quot;&gt;https://docs.mongodb.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tatu Saloranta et al., “Jackson Databind”, 2021.
&lt;a href=&quot;https://github.com/FasterXML/jackson-databind&quot;&gt;https://github.com/FasterXML/jackson-databind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="java-serialization" /><category term="reliability" /><category term="java" /><category term="mongodb" /><category term="serialization" /><category term="jackson" /><category term="reliability" /><summary type="html">How to add or remove a field from a Mongo collection without breaking the production?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-bence-sandor-sztrecska-wIs-mjKMiw4-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-bence-sandor-sztrecska-wIs-mjKMiw4-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Writing Parameterized Tests in JUnit 5</title><link href="https://mincong.io/2021/01/31/juni5-parameterized-tests/" rel="alternate" type="text/html" title="Writing Parameterized Tests in JUnit 5" /><published>2021-01-31T16:12:25+01:00</published><updated>2021-01-31T16:12:25+01:00</updated><id>https://mincong.io/2021/01/31/juni5-parameterized-tests</id><content type="html" xml:base="https://mincong.io/2021/01/31/juni5-parameterized-tests/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Writing tests is an important part of software development, it’s a good way to
ensure that your code works as expected. However, it is difficult to write tests
that cover all the scenarios. It’s also difficult to make them easy to understand
when the implementation is complex. In this article, we are going to see how
parameterized tests of JUnit 5 can help.&lt;/p&gt;

&lt;p&gt;After reading this article, you will understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The motivation of using parameterized tests&lt;/li&gt;
  &lt;li&gt;How to use parameterized tests&lt;/li&gt;
  &lt;li&gt;Different sources of arguments&lt;/li&gt;
  &lt;li&gt;The argument conversion&lt;/li&gt;
  &lt;li&gt;Interactions with IDE&lt;/li&gt;
  &lt;li&gt;When to use or not to use parameterized tests?&lt;/li&gt;
  &lt;li&gt;How to go further from here?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Why should we consider using parameterized tests in our code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improve test coverage.&lt;/strong&gt; Using parameterized testing can improve the code
coverage. Thanks to parameterized test, you can easily add more parameters, or
add more values for the same parameter to an existing test. This is done
without heavily changing the logic of the test code. By doing so, your
assertions cover more lines or more branches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reuse test code.&lt;/strong&gt; Using parameterized testing reuses the same test case for
multiple inputs. Therefore, it simplifies the code set up, improves the
maintainability of these tests, and therefore save your time to develop other
features or to write tests for other scenarios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clarify inputs and outputs.&lt;/strong&gt; Sometimes the test code is not as readable as you
may think about. Without putting additional effort into those tests, it can become
a nightmare to understand the purpose of this test, such as what are
the real input or output parameters of these tests. By using parameterized
testing, we extract those values as external parameters. Therefore, it’s easier
to understand. It’s easier because 1) we can see those parameters as method input
parameters; 2) we can find the reasoning of the inputs by comparing their common
points and differences.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delegate the complexity to JUnit.&lt;/strong&gt; But why not just adding a for-loop inside
the test? Why using the parameterized testing feature in JUnit 5? Well, this is
because by doing so, we delegate the complexity to JUnit. More precisely, JUnit
ensures that each execution contains their set up and tear downs; the failure of
one execution won’t impact the other, they are isolated; we can have a nice
display name in IDE or build to explain the current execution; it can handle
different sources and type conversions, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validate multiple implementations.&lt;/strong&gt; Parameterized testing is also useful for
validating multiple implementations. These implementations may need to respect
the same specification. Therefore, we can express the expectations of this
specification as tests and require all implementations to pass these tests. This
is a good way to prevent regressions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing the orthogonality.&lt;/strong&gt; Sometimes, one method accepts multiple input
parameters, they should be orthogonal. That is, the output of one scenario will
only depend on one input parameter, not others. So when changing the value of
any other parameters, the test result shouldn’t be changed. We can ensure that
the orthogonality is respected through parameterized testing.&lt;/p&gt;

&lt;p&gt;These are some reasons that I found during my daily development. I hope they are
enough to convince you to try parameterized testing. Now we understood the
motivation, we are going to check how to use it in the following section.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;

&lt;p&gt;Before using parameterized testing in JUnit 5, you have to declare 3
dependencies: the specification (API) and the implementation (engine) of the
JUnit 5, and also an additional module to support parameterized testing. Here is
what do they look like in the Maven POM file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The specification (API) and the implementation (engine) are required for running
JUnit 5. You probably have them in your project already.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit-jupiter-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.7.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit-jupiter-engine&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.7.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then declare the additional Maven dependency to support parameterized testing:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit-jupiter-params&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.7.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The basic syntax of a parameterized test is as follows:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterizedTest&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ValueSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;racecar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;radar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;able was I ere I saw elba&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;palindromes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where you can see that: 1) you need to use annotation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ParameterizedTest&lt;/code&gt; as
the replacement of the regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Test&lt;/code&gt;; 2) an annotation containing a list of
sources to be used for the parameterized test; 3) one input parameter to
represent the source value provided by the annotation, it can also be multiple
input parameters: it depends on your sources.&lt;/p&gt;

&lt;h2 id=&quot;source-providers&quot;&gt;Source Providers&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ValueSource&lt;/code&gt; annotation can be used to provide a list of values, which each
item contains one single argument. It is supported for types: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;short&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.String&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.Class&lt;/code&gt;. However, you may notice that value source can only provide
one argument at a time, so you have to keep your test simple to ensure that all
these arguments will fit the test.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ValueSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ValueSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;booleans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ArgumentsSource&lt;/code&gt; annotation can be used to link to an arguments-provider,
which provides a stream of argument arrays (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arguments&lt;/code&gt;) for the parameterized
tests. I found it useful for two cases: 1) providing multiple implementations of
the same interface, so that we can validate all of them using the same test, as
you can see in the code block below; 2) providing values that are computed from
another field in the codebase. This is not suitable for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ValueSource&lt;/code&gt; because the line will be long and unreadable. Using
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ArgumentsSource&lt;/code&gt; makes the metadata of the test method more declarative.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterizedTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ArgumentsSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ChatBotProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ChatBot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChatBotProvider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentsProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;provideArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExtensionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringFormatChatBot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringConcatenationChatBot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Arguments:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CsvSource&lt;/code&gt; annotation can be used to declare multiple argument arrays, each
array representing one argument array. This is my favorite annotation for
providing sources because I can provide multiple arguments for each test case,
which is usually the case for enterprise development. You may notice that the
string value in the CSV source is converted to primitive type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; by JUnit.
This makes your tests concise. We will talk more about conversions in the next
section.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterizedTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@CsvSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;1,  2, 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;1, -1, 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;1,  1, 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other source providers, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnumSource&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NullSource&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EmptySource&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MethodSource&lt;/code&gt;. They provide different types
of sources and they are easy to use. You can find the complete
documentation in &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources&quot;&gt;JUnit 5 User Guide - 2.15.3 Sources of
Arguments&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conversion&quot;&gt;Conversion&lt;/h2&gt;

&lt;p&gt;From my experience, the CSV source seems to be the most frequently used
provider. But inside a CSV file, every row and every cell is considered as a
string. In this section, I want to share some tricks about type conversion. It
makes your code more concise: just let JUnit handle the work for you ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String-to-Primitive.&lt;/strong&gt; When providing a primitive type as an input parameter for
the test case, JUnit knows how to convert it. For example, given an input
parameter as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, then JUnit will convert your string into an integer
automatically. The same logic applies to other primitive types: long, double, float,
boolean, etc.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterizedTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@CsvSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;1,  2, 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;1, -1, 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;1,  1, 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;String-to-Enum.&lt;/strong&gt; When providing an enumeration type as an input parameter for the
test case, JUnit knows how to convert it as well (probably using the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;valueOf(String)&lt;/code&gt; function of enumeration). Therefore, you don’t have to handle
the conversion yourself. Here is a concrete example about how to converting a
string into enum type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilePermission&lt;/code&gt;, and then test the executability for
different permission.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ParameterizedTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@CsvSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;R, false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;W, false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;RW, false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;X, true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;RX, true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;WX, true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;RWX, true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isExecutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FilePermission&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isExecutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isExecutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isExecutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE&lt;/h2&gt;

&lt;p&gt;Another important part of testing is to understand how to use IDE so that it
can help you to be even more productive! In this section, I want to share two
things about IDE with you: how to check which parameterized test is running and
how to check the test coverage. Here I am using IntelliJ IDEA but I think the
methodology is still valid for other IDEs.&lt;/p&gt;

&lt;h3 id=&quot;ide-display-name-of-tests&quot;&gt;IDE: Display Name of Tests&lt;/h3&gt;

&lt;p&gt;When running the parameterized in JUnit 5, you can see each test
execution with the input parameters. For example, the test case
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isWritable(FilePermission, boolean)&lt;/code&gt; is executed 7 times with different file
permission each time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210131-junit5.png&quot; alt=&quot;Execution of JUnit 5 parameterized test in IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to customize the display names to print something more
human-readable. Personally, I prefer to avoid spending time on it. But if you
were interested, you can find it in the &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-display-names&quot;&gt;JUnit 5 User Guide §2.15.6. Customizing
Display
Names&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ide-test-coverage&quot;&gt;IDE: Test Coverage&lt;/h3&gt;

&lt;p&gt;The main motivation of using parameterized testing is to increase
the test coverage and improve the robustness of the implementation. To review
the test coverage, you can run the tests with coverage and then check the
coverage. Here is how to trigger a “run tests with coverage” at package level
or class level in IntelliJ IDEA:&lt;/p&gt;

&lt;p&gt;Right-click on a Java package, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.mincong.junit5&lt;/code&gt; and select the option “Run ‘Test
in ‘io.mincong.junit5’’ with Coverage” to trigger the tests with coverage
enabled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210131-coverage-package-level.png&quot; alt=&quot;Run tests with coverage at package level in IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Left-click on the test icon of the class name or the test name of a test file,
such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilePermissionTest&lt;/code&gt;, then select option “Run ‘FilePermissionTest’ with
Coverage” to trigger the tests with coverage enabled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210131-coverage-class-level.png&quot; alt=&quot;Run tests with coverage at class level in IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the test execution is done, you can find the coverage report in different
views, such as the project view, the class file itself, or the dedicated test
coverage view:&lt;/p&gt;

&lt;p&gt;In the project, we can see the test coverage of each package and each class
inside the package. It gives a good overview of the current situation of a given
package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210131-coverage-report-project-view.png&quot; alt=&quot;Coverage report at project view in IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside a class, it’s also possible to see the code coverage right next to the line
numbers. The color green is covered and the color red is not covered. This is useful
when you are modifying some logic, especially for some critical path, because
you want them to be covered by at least one test. This information helps you to
improve your tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210131-coverage-report-class-view.png&quot; alt=&quot;Coverage report at class view in IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last view is the coverage view, where you can see a list of packages and
their coverage. You can also zoom into one package as the screenshot below and
inspect the coverage of each file inside the package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20210131-coverage-report-coverage-view.png&quot; alt=&quot;Coverage report at coverage view in IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pros-and-cons&quot;&gt;Pros and Cons&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;When to use and not to use parameterized tests?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we understood how to use parameterized tests and get familiar with IDE, the
remaining question is: should we use it for our tests? I think it depends on
your needs. It’s not always the right choice. Here are some cases that I
summarized during my daily work. I hope that they will give you some
inspiration.&lt;/p&gt;

&lt;p&gt;As mentioned in the motivation section, you should use parameterized tests to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve the test coverage&lt;/li&gt;
  &lt;li&gt;Reuse test code&lt;/li&gt;
  &lt;li&gt;Clarify inputs and outputs of your test&lt;/li&gt;
  &lt;li&gt;Delegate the complexity to JUnit&lt;/li&gt;
  &lt;li&gt;Validate multiple implementations&lt;/li&gt;
  &lt;li&gt;Testing the orthogonality of different parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you shouldn’t use parameterized tests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if it makes the logic of the test difficult the understand. Typically, if it
introduces if-statements or other branches in the code.&lt;/li&gt;
  &lt;li&gt;if different arguments don’t share the same purpose. If they are different, it is
probably worth creating multiple test cases. A good way to know this is to
summarize the purpose in one sentence, if you cannot, it’s probably worth
writing different tests.&lt;/li&gt;
  &lt;li&gt;if there are too many input arguments. This can make the tests difficult to
maintain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;How to go further from here?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To better understand parameterized tests of JUnit 5, visit the official
&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests&quot;&gt;JUnit 5 User Guide §2.15 Parameterized
Tests&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To learn more about testing, especially testing in Java, visit &lt;a href=&quot;/tags/testing/&quot;&gt;other articles
with tag “testing” of my blog&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see the source code of this article, they are available on GitHub
under module junit5 of project
&lt;a href=&quot;https://github.com/mincong-h/java-examples/tree/blog/junit5-parameterized-tests/junit5&quot;&gt;mincong-h/java-examples&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we saw the motivation of using parameterized testing in JUnit
5, how to declared dependencies, the annotations of different source providers
(value source, argument source, CSV source, …), the conversation from string
to primitive types and enum types, running tests and inspecting coverage in
IntelliJ IDEA, the pros and cons of using parameterized tests, and finally how
to go further from here.
Interested to know more? You can subscribe to &lt;a href=&quot;/feed.xml&quot;&gt;the feed of my blog&lt;/a&gt;, follow me
on &lt;a href=&quot;https://twitter.com/mincong_h&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;https://github.com/mincong-h/&quot;&gt;GitHub&lt;/a&gt;. Hope you enjoy this article, see you the next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;JUnit 5 User Guide, 2020.
&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;https://junit.org/junit5/docs/current/user-guide/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mincong Huang</name><email>mincong.h@gmail.com</email></author><category term="java-core" /><category term="java" /><category term="junit" /><category term="junit5" /><category term="testing" /><summary type="html">Improving code quality using parameterized tests of JUnit 5! This article explains the motivation, the basic syntax, different annotations, and IDE-related actions about parameterized tests. Also, when you should or shouldn't use it and how to go further from here.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mincong.io/assets/bg-jean-louis-paulin-lHwmE58fW4Y-unsplash.jpg" /><media:content medium="image" url="https://mincong.io/assets/bg-jean-louis-paulin-lHwmE58fW4Y-unsplash.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>